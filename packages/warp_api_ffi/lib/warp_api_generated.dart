// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void dummy_export() {
    return _dummy_export();
  }

  late final _dummy_exportPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('dummy_export');
  late final _dummy_export = _dummy_exportPtr.asFunction<void Function()>();

  void dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _dart_post_cobject(
      ptr,
    );
  }

  late final _dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'dart_post_cobject');
  late final _dart_post_cobject =
      _dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();

  void deallocate_str(
    ffi.Pointer<ffi.Char> s,
  ) {
    return _deallocate_str(
      s,
    );
  }

  late final _deallocate_strPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'deallocate_str');
  late final _deallocate_str =
      _deallocate_strPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void deallocate_bytes(
    ffi.Pointer<ffi.Uint8> ptr,
    int len,
  ) {
    return _deallocate_bytes(
      ptr,
      len,
    );
  }

  late final _deallocate_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Uint32)>>('deallocate_bytes');
  late final _deallocate_bytes = _deallocate_bytesPtr
      .asFunction<void Function(ffi.Pointer<ffi.Uint8>, int)>();

  CResult_u8 init_wallet(
    int coin,
    ffi.Pointer<ffi.Char> db_path,
  ) {
    return _init_wallet(
      coin,
      db_path,
    );
  }

  late final _init_walletPtr = _lookup<
      ffi.NativeFunction<
          CResult_u8 Function(
              ffi.Uint8, ffi.Pointer<ffi.Char>)>>('init_wallet');
  late final _init_wallet = _init_walletPtr
      .asFunction<CResult_u8 Function(int, ffi.Pointer<ffi.Char>)>();

  CResult_u8 migrate_db(
    int coin,
    ffi.Pointer<ffi.Char> db_path,
  ) {
    return _migrate_db(
      coin,
      db_path,
    );
  }

  late final _migrate_dbPtr = _lookup<
      ffi.NativeFunction<
          CResult_u8 Function(ffi.Uint8, ffi.Pointer<ffi.Char>)>>('migrate_db');
  late final _migrate_db = _migrate_dbPtr
      .asFunction<CResult_u8 Function(int, ffi.Pointer<ffi.Char>)>();

  CResult_u8 migrate_data_db(
    int coin,
  ) {
    return _migrate_data_db(
      coin,
    );
  }

  late final _migrate_data_dbPtr =
      _lookup<ffi.NativeFunction<CResult_u8 Function(ffi.Uint8)>>(
          'migrate_data_db');
  late final _migrate_data_db =
      _migrate_data_dbPtr.asFunction<CResult_u8 Function(int)>();

  void set_active(
    int active,
  ) {
    return _set_active(
      active,
    );
  }

  late final _set_activePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint8)>>('set_active');
  late final _set_active = _set_activePtr.asFunction<void Function(int)>();

  void set_coin_lwd_url(
    int coin,
    ffi.Pointer<ffi.Char> lwd_url,
  ) {
    return _set_coin_lwd_url(
      coin,
      lwd_url,
    );
  }

  late final _set_coin_lwd_urlPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Uint8, ffi.Pointer<ffi.Char>)>>(
      'set_coin_lwd_url');
  late final _set_coin_lwd_url = _set_coin_lwd_urlPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> get_lwd_url(
    int coin,
  ) {
    return _get_lwd_url(
      coin,
    );
  }

  late final _get_lwd_urlPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Uint8)>>(
          'get_lwd_url');
  late final _get_lwd_url =
      _get_lwd_urlPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void set_coin_passwd(
    int coin,
    ffi.Pointer<ffi.Char> passwd,
  ) {
    return _set_coin_passwd(
      coin,
      passwd,
    );
  }

  late final _set_coin_passwdPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Uint8, ffi.Pointer<ffi.Char>)>>(
      'set_coin_passwd');
  late final _set_coin_passwd = _set_coin_passwdPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  void reset_app() {
    return _reset_app();
  }

  late final _reset_appPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('reset_app');
  late final _reset_app = _reset_appPtr.asFunction<void Function()>();

  void mempool_run(
    int port,
  ) {
    return _mempool_run(
      port,
    );
  }

  late final _mempool_runPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('mempool_run');
  late final _mempool_run = _mempool_runPtr.asFunction<void Function(int)>();

  void mempool_set_active(
    int coin,
    int id_account,
  ) {
    return _mempool_set_active(
      coin,
      id_account,
    );
  }

  late final _mempool_set_activePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint8, ffi.Uint32)>>(
          'mempool_set_active');
  late final _mempool_set_active =
      _mempool_set_activePtr.asFunction<void Function(int, int)>();

  CResult_u32 new_account(
    int coin,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> data,
    int index,
  ) {
    return _new_account(
      coin,
      name,
      data,
      index,
    );
  }

  late final _new_accountPtr = _lookup<
      ffi.NativeFunction<
          CResult_u32 Function(ffi.Uint8, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int32)>>('new_account');
  late final _new_account = _new_accountPtr.asFunction<
      CResult_u32 Function(
          int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void new_sub_account(
    ffi.Pointer<ffi.Char> name,
    int index,
    int count,
  ) {
    return _new_sub_account(
      name,
      index,
      count,
    );
  }

  late final _new_sub_accountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int32,
              ffi.Uint32)>>('new_sub_account');
  late final _new_sub_account = _new_sub_accountPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>, int, int)>();

  CResult_u8 convert_to_watchonly(
    int coin,
    int id_account,
  ) {
    return _convert_to_watchonly(
      coin,
      id_account,
    );
  }

  late final _convert_to_watchonlyPtr =
      _lookup<ffi.NativeFunction<CResult_u8 Function(ffi.Uint8, ffi.Uint32)>>(
          'convert_to_watchonly');
  late final _convert_to_watchonly =
      _convert_to_watchonlyPtr.asFunction<CResult_u8 Function(int, int)>();

  CResult______u8 get_backup(
    int coin,
    int id_account,
  ) {
    return _get_backup(
      coin,
      id_account,
    );
  }

  late final _get_backupPtr = _lookup<
          ffi.NativeFunction<CResult______u8 Function(ffi.Uint8, ffi.Uint32)>>(
      'get_backup');
  late final _get_backup =
      _get_backupPtr.asFunction<CResult______u8 Function(int, int)>();

  CResult_u8 get_available_addrs(
    int coin,
    int account,
  ) {
    return _get_available_addrs(
      coin,
      account,
    );
  }

  late final _get_available_addrsPtr =
      _lookup<ffi.NativeFunction<CResult_u8 Function(ffi.Uint8, ffi.Uint32)>>(
          'get_available_addrs');
  late final _get_available_addrs =
      _get_available_addrsPtr.asFunction<CResult_u8 Function(int, int)>();

  CResult_____c_char get_address(
    int coin,
    int id_account,
    int ua_type,
  ) {
    return _get_address(
      coin,
      id_account,
      ua_type,
    );
  }

  late final _get_addressPtr = _lookup<
      ffi.NativeFunction<
          CResult_____c_char Function(
              ffi.Uint8, ffi.Uint32, ffi.Uint8)>>('get_address');
  late final _get_address =
      _get_addressPtr.asFunction<CResult_____c_char Function(int, int, int)>();

  void import_transparent_key(
    int coin,
    int id_account,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _import_transparent_key(
      coin,
      id_account,
      path,
    );
  }

  late final _import_transparent_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Uint8, ffi.Uint32,
              ffi.Pointer<ffi.Char>)>>('import_transparent_key');
  late final _import_transparent_key = _import_transparent_keyPtr
      .asFunction<void Function(int, int, ffi.Pointer<ffi.Char>)>();

  void import_transparent_secret_key(
    int coin,
    int id_account,
    ffi.Pointer<ffi.Char> secret_key,
  ) {
    return _import_transparent_secret_key(
      coin,
      id_account,
      secret_key,
    );
  }

  late final _import_transparent_secret_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Uint8, ffi.Uint32,
              ffi.Pointer<ffi.Char>)>>('import_transparent_secret_key');
  late final _import_transparent_secret_key = _import_transparent_secret_keyPtr
      .asFunction<void Function(int, int, ffi.Pointer<ffi.Char>)>();

  void cancel_warp() {
    return _cancel_warp();
  }

  late final _cancel_warpPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('cancel_warp');
  late final _cancel_warp = _cancel_warpPtr.asFunction<void Function()>();

  CResult_u8 warp(
    int coin,
    int get_tx,
    int anchor_offset,
    int max_cost,
    int port,
  ) {
    return _warp(
      coin,
      get_tx,
      anchor_offset,
      max_cost,
      port,
    );
  }

  late final _warpPtr = _lookup<
      ffi.NativeFunction<
          CResult_u8 Function(
              ffi.Uint8, bool, ffi.Uint32, ffi.Uint32, ffi.Int64)>>('warp');
  late final _warp =
      _warpPtr.asFunction<CResult_u8 Function(int, int, int, int, int)>();

  int is_valid_key(
    int coin,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _is_valid_key(
      coin,
      key,
    );
  }

  late final _is_valid_keyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int8 Function(ffi.Uint8, ffi.Pointer<ffi.Char>)>>(
      'is_valid_key');
  late final _is_valid_key =
      _is_valid_keyPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int valid_address(
    int coin,
    ffi.Pointer<ffi.Char> address,
  ) {
    return _valid_address(
      coin,
      address,
    );
  }

  late final _valid_addressPtr = _lookup<
          ffi.NativeFunction<bool Function(ffi.Uint8, ffi.Pointer<ffi.Char>)>>(
      'valid_address');
  late final _valid_address =
      _valid_addressPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  CResult_____c_char get_diversified_address(
    int ua_type,
    int time,
  ) {
    return _get_diversified_address(
      ua_type,
      time,
    );
  }

  late final _get_diversified_addressPtr = _lookup<
          ffi
          .NativeFunction<CResult_____c_char Function(ffi.Uint8, ffi.Uint32)>>(
      'get_diversified_address');
  late final _get_diversified_address = _get_diversified_addressPtr
      .asFunction<CResult_____c_char Function(int, int)>();

  CResult_u32 get_latest_height() {
    return _get_latest_height();
  }

  late final _get_latest_heightPtr =
      _lookup<ffi.NativeFunction<CResult_u32 Function()>>('get_latest_height');
  late final _get_latest_height =
      _get_latest_heightPtr.asFunction<CResult_u32 Function()>();

  CResult_u8 ledger_build_keys() {
    return _ledger_build_keys();
  }

  late final _ledger_build_keysPtr =
      _lookup<ffi.NativeFunction<CResult_u8 Function()>>('ledger_build_keys');
  late final _ledger_build_keys =
      _ledger_build_keysPtr.asFunction<CResult_u8 Function()>();

  CResult_____c_char ledger_get_fvk(
    int coin,
  ) {
    return _ledger_get_fvk(
      coin,
    );
  }

  late final _ledger_get_fvkPtr =
      _lookup<ffi.NativeFunction<CResult_____c_char Function(ffi.Uint8)>>(
          'ledger_get_fvk');
  late final _ledger_get_fvk =
      _ledger_get_fvkPtr.asFunction<CResult_____c_char Function(int)>();

  CResult_____c_char ledger_get_address() {
    return _ledger_get_address();
  }

  late final _ledger_get_addressPtr =
      _lookup<ffi.NativeFunction<CResult_____c_char Function()>>(
          'ledger_get_address');
  late final _ledger_get_address =
      _ledger_get_addressPtr.asFunction<CResult_____c_char Function()>();

  void skip_to_last_height(
    int coin,
  ) {
    return _skip_to_last_height(
      coin,
    );
  }

  late final _skip_to_last_heightPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint8)>>(
          'skip_to_last_height');
  late final _skip_to_last_height =
      _skip_to_last_heightPtr.asFunction<void Function(int)>();

  CResult_u32 rewind_to(
    int height,
  ) {
    return _rewind_to(
      height,
    );
  }

  late final _rewind_toPtr =
      _lookup<ffi.NativeFunction<CResult_u32 Function(ffi.Uint32)>>(
          'rewind_to');
  late final _rewind_to = _rewind_toPtr.asFunction<CResult_u32 Function(int)>();

  void rescan_from(
    int height,
  ) {
    return _rescan_from(
      height,
    );
  }

  late final _rescan_fromPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint32)>>('rescan_from');
  late final _rescan_from = _rescan_fromPtr.asFunction<void Function(int)>();

  CResult_u64 get_taddr_balance(
    int coin,
    int id_account,
  ) {
    return _get_taddr_balance(
      coin,
      id_account,
    );
  }

  late final _get_taddr_balancePtr =
      _lookup<ffi.NativeFunction<CResult_u64 Function(ffi.Uint8, ffi.Uint32)>>(
          'get_taddr_balance');
  late final _get_taddr_balance =
      _get_taddr_balancePtr.asFunction<CResult_u64 Function(int, int)>();

  CResult_____c_char transfer_pools(
    int coin,
    int account,
    int from_pool,
    int to_pool,
    int amount,
    int fee_included,
    ffi.Pointer<ffi.Char> memo,
    int split_amount,
    int confirmations,
    ffi.Pointer<ffi.Uint8> fee_bytes,
    int fee_len,
  ) {
    return _transfer_pools(
      coin,
      account,
      from_pool,
      to_pool,
      amount,
      fee_included,
      memo,
      split_amount,
      confirmations,
      fee_bytes,
      fee_len,
    );
  }

  late final _transfer_poolsPtr = _lookup<
      ffi.NativeFunction<
          CResult_____c_char Function(
              ffi.Uint8,
              ffi.Uint32,
              ffi.Uint8,
              ffi.Uint8,
              ffi.Uint64,
              bool,
              ffi.Pointer<ffi.Char>,
              ffi.Uint64,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint64)>>('transfer_pools');
  late final _transfer_pools = _transfer_poolsPtr.asFunction<
      CResult_____c_char Function(int, int, int, int, int, int,
          ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  CResult_____c_char shield_taddr(
    int coin,
    int account,
    int amount,
    int confirmations,
    ffi.Pointer<ffi.Uint8> fee_bytes,
    int fee_len,
  ) {
    return _shield_taddr(
      coin,
      account,
      amount,
      confirmations,
      fee_bytes,
      fee_len,
    );
  }

  late final _shield_taddrPtr = _lookup<
      ffi.NativeFunction<
          CResult_____c_char Function(ffi.Uint8, ffi.Uint32, ffi.Uint64,
              ffi.Uint32, ffi.Pointer<ffi.Uint8>, ffi.Uint64)>>('shield_taddr');
  late final _shield_taddr = _shield_taddrPtr.asFunction<
      CResult_____c_char Function(
          int, int, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  CResult______u8 scan_transparent_accounts(
    int coin,
    int account,
    int gap_limit,
  ) {
    return _scan_transparent_accounts(
      coin,
      account,
      gap_limit,
    );
  }

  late final _scan_transparent_accountsPtr = _lookup<
      ffi.NativeFunction<
          CResult______u8 Function(
              ffi.Uint8, ffi.Uint32, ffi.Uint32)>>('scan_transparent_accounts');
  late final _scan_transparent_accounts = _scan_transparent_accountsPtr
      .asFunction<CResult______u8 Function(int, int, int)>();

  CResult_____c_char prepare_multi_payment(
    int coin,
    int account,
    ffi.Pointer<ffi.Uint8> recipients_bytes,
    int recipients_len,
    int anchor_offset,
    ffi.Pointer<ffi.Uint8> fee_bytes,
    int fee_len,
  ) {
    return _prepare_multi_payment(
      coin,
      account,
      recipients_bytes,
      recipients_len,
      anchor_offset,
      fee_bytes,
      fee_len,
    );
  }

  late final _prepare_multi_paymentPtr = _lookup<
      ffi.NativeFunction<
          CResult_____c_char Function(
              ffi.Uint8,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint64,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint64)>>('prepare_multi_payment');
  late final _prepare_multi_payment = _prepare_multi_paymentPtr.asFunction<
      CResult_____c_char Function(int, int, ffi.Pointer<ffi.Uint8>, int, int,
          ffi.Pointer<ffi.Uint8>, int)>();

  CResult______u8 transaction_report(
    int coin,
    ffi.Pointer<ffi.Char> plan,
  ) {
    return _transaction_report(
      coin,
      plan,
    );
  }

  late final _transaction_reportPtr = _lookup<
      ffi.NativeFunction<
          CResult______u8 Function(
              ffi.Uint8, ffi.Pointer<ffi.Char>)>>('transaction_report');
  late final _transaction_report = _transaction_reportPtr
      .asFunction<CResult______u8 Function(int, ffi.Pointer<ffi.Char>)>();

  CResult_____c_char sign(
    int coin,
    int account,
    ffi.Pointer<ffi.Char> tx_plan,
    int _port,
  ) {
    return _sign(
      coin,
      account,
      tx_plan,
      _port,
    );
  }

  late final _signPtr = _lookup<
      ffi.NativeFunction<
          CResult_____c_char Function(ffi.Uint8, ffi.Uint32,
              ffi.Pointer<ffi.Char>, ffi.Int64)>>('sign');
  late final _sign = _signPtr.asFunction<
      CResult_____c_char Function(int, int, ffi.Pointer<ffi.Char>, int)>();

  CResult_____c_char sign_and_broadcast(
    int coin,
    int account,
    ffi.Pointer<ffi.Char> tx_plan,
  ) {
    return _sign_and_broadcast(
      coin,
      account,
      tx_plan,
    );
  }

  late final _sign_and_broadcastPtr = _lookup<
      ffi.NativeFunction<
          CResult_____c_char Function(ffi.Uint8, ffi.Uint32,
              ffi.Pointer<ffi.Char>)>>('sign_and_broadcast');
  late final _sign_and_broadcast = _sign_and_broadcastPtr.asFunction<
      CResult_____c_char Function(int, int, ffi.Pointer<ffi.Char>)>();

  CResult_____c_char broadcast_tx(
    ffi.Pointer<ffi.Char> tx_str,
  ) {
    return _broadcast_tx(
      tx_str,
    );
  }

  late final _broadcast_txPtr = _lookup<
          ffi
          .NativeFunction<CResult_____c_char Function(ffi.Pointer<ffi.Char>)>>(
      'broadcast_tx');
  late final _broadcast_tx = _broadcast_txPtr
      .asFunction<CResult_____c_char Function(ffi.Pointer<ffi.Char>)>();

  int is_valid_tkey(
    ffi.Pointer<ffi.Char> sk,
  ) {
    return _is_valid_tkey(
      sk,
    );
  }

  late final _is_valid_tkeyPtr =
      _lookup<ffi.NativeFunction<bool Function(ffi.Pointer<ffi.Char>)>>(
          'is_valid_tkey');
  late final _is_valid_tkey =
      _is_valid_tkeyPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  CResult_____c_char sweep_tkey(
    int last_height,
    ffi.Pointer<ffi.Char> sk,
    int pool,
    int confirmations,
    ffi.Pointer<ffi.Uint8> fee_bytes,
    int fee_len,
  ) {
    return _sweep_tkey(
      last_height,
      sk,
      pool,
      confirmations,
      fee_bytes,
      fee_len,
    );
  }

  late final _sweep_tkeyPtr = _lookup<
      ffi.NativeFunction<
          CResult_____c_char Function(
              ffi.Uint32,
              ffi.Pointer<ffi.Char>,
              ffi.Uint8,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint64)>>('sweep_tkey');
  late final _sweep_tkey = _sweep_tkeyPtr.asFunction<
      CResult_____c_char Function(
          int, ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Uint8>, int)>();

  CResult_u32 get_activation_date() {
    return _get_activation_date();
  }

  late final _get_activation_datePtr =
      _lookup<ffi.NativeFunction<CResult_u32 Function()>>(
          'get_activation_date');
  late final _get_activation_date =
      _get_activation_datePtr.asFunction<CResult_u32 Function()>();

  CResult_u32 get_block_by_time(
    int time,
  ) {
    return _get_block_by_time(
      time,
    );
  }

  late final _get_block_by_timePtr =
      _lookup<ffi.NativeFunction<CResult_u32 Function(ffi.Uint32)>>(
          'get_block_by_time');
  late final _get_block_by_time =
      _get_block_by_timePtr.asFunction<CResult_u32 Function(int)>();

  CResult_u32 sync_historical_prices(
    int now,
    int days,
    ffi.Pointer<ffi.Char> currency,
  ) {
    return _sync_historical_prices(
      now,
      days,
      currency,
    );
  }

  late final _sync_historical_pricesPtr = _lookup<
      ffi.NativeFunction<
          CResult_u32 Function(ffi.Int64, ffi.Uint32,
              ffi.Pointer<ffi.Char>)>>('sync_historical_prices');
  late final _sync_historical_prices = _sync_historical_pricesPtr
      .asFunction<CResult_u32 Function(int, int, ffi.Pointer<ffi.Char>)>();

  void store_contact(
    int id,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> address,
    int dirty,
  ) {
    return _store_contact(
      id,
      name,
      address,
      dirty,
    );
  }

  late final _store_contactPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Uint32, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, bool)>>('store_contact');
  late final _store_contact = _store_contactPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  CResult_____c_char commit_unsaved_contacts(
    int anchor_offset,
    ffi.Pointer<ffi.Uint8> fee_bytes,
    int fee_len,
  ) {
    return _commit_unsaved_contacts(
      anchor_offset,
      fee_bytes,
      fee_len,
    );
  }

  late final _commit_unsaved_contactsPtr = _lookup<
      ffi.NativeFunction<
          CResult_____c_char Function(ffi.Uint32, ffi.Pointer<ffi.Uint8>,
              ffi.Uint64)>>('commit_unsaved_contacts');
  late final _commit_unsaved_contacts = _commit_unsaved_contactsPtr.asFunction<
      CResult_____c_char Function(int, ffi.Pointer<ffi.Uint8>, int)>();

  void mark_message_read(
    int message,
    int read,
  ) {
    return _mark_message_read(
      message,
      read,
    );
  }

  late final _mark_message_readPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint32, bool)>>(
          'mark_message_read');
  late final _mark_message_read =
      _mark_message_readPtr.asFunction<void Function(int, int)>();

  void mark_all_messages_read(
    int read,
  ) {
    return _mark_all_messages_read(
      read,
    );
  }

  late final _mark_all_messages_readPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(bool)>>(
          'mark_all_messages_read');
  late final _mark_all_messages_read =
      _mark_all_messages_readPtr.asFunction<void Function(int)>();

  void truncate_data() {
    return _truncate_data();
  }

  late final _truncate_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('truncate_data');
  late final _truncate_data = _truncate_dataPtr.asFunction<void Function()>();

  void truncate_sync_data() {
    return _truncate_sync_data();
  }

  late final _truncate_sync_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('truncate_sync_data');
  late final _truncate_sync_data =
      _truncate_sync_dataPtr.asFunction<void Function()>();

  int check_account(
    int coin,
    int account,
  ) {
    return _check_account(
      coin,
      account,
    );
  }

  late final _check_accountPtr =
      _lookup<ffi.NativeFunction<bool Function(ffi.Uint8, ffi.Uint32)>>(
          'check_account');
  late final _check_account =
      _check_accountPtr.asFunction<int Function(int, int)>();

  void delete_account(
    int coin,
    int account,
  ) {
    return _delete_account(
      coin,
      account,
    );
  }

  late final _delete_accountPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint8, ffi.Uint32)>>(
          'delete_account');
  late final _delete_account =
      _delete_accountPtr.asFunction<void Function(int, int)>();

  CResult_____c_char make_payment_uri(
    int coin,
    ffi.Pointer<ffi.Char> address,
    int amount,
    ffi.Pointer<ffi.Char> memo,
  ) {
    return _make_payment_uri(
      coin,
      address,
      amount,
      memo,
    );
  }

  late final _make_payment_uriPtr = _lookup<
      ffi.NativeFunction<
          CResult_____c_char Function(ffi.Uint8, ffi.Pointer<ffi.Char>,
              ffi.Uint64, ffi.Pointer<ffi.Char>)>>('make_payment_uri');
  late final _make_payment_uri = _make_payment_uriPtr.asFunction<
      CResult_____c_char Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  CResult_____c_char parse_payment_uri(
    ffi.Pointer<ffi.Char> uri,
  ) {
    return _parse_payment_uri(
      uri,
    );
  }

  late final _parse_payment_uriPtr = _lookup<
          ffi
          .NativeFunction<CResult_____c_char Function(ffi.Pointer<ffi.Char>)>>(
      'parse_payment_uri');
  late final _parse_payment_uri = _parse_payment_uriPtr
      .asFunction<CResult_____c_char Function(ffi.Pointer<ffi.Char>)>();

  CResult______u8 generate_key() {
    return _generate_key();
  }

  late final _generate_keyPtr =
      _lookup<ffi.NativeFunction<CResult______u8 Function()>>('generate_key');
  late final _generate_key =
      _generate_keyPtr.asFunction<CResult______u8 Function()>();

  CResult_u8 zip_backup(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> dst_dir,
  ) {
    return _zip_backup(
      key,
      dst_dir,
    );
  }

  late final _zip_backupPtr = _lookup<
      ffi.NativeFunction<
          CResult_u8 Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('zip_backup');
  late final _zip_backup = _zip_backupPtr.asFunction<
      CResult_u8 Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  CResult_u8 unzip_backup(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> data_path,
    ffi.Pointer<ffi.Char> dst_dir,
  ) {
    return _unzip_backup(
      key,
      data_path,
      dst_dir,
    );
  }

  late final _unzip_backupPtr = _lookup<
      ffi.NativeFunction<
          CResult_u8 Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('unzip_backup');
  late final _unzip_backup = _unzip_backupPtr.asFunction<
      CResult_u8 Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  CResult______u8 split_data(
    int id,
    ffi.Pointer<ffi.Char> data,
  ) {
    return _split_data(
      id,
      data,
    );
  }

  late final _split_dataPtr = _lookup<
      ffi.NativeFunction<
          CResult______u8 Function(
              ffi.Uint32, ffi.Pointer<ffi.Char>)>>('split_data');
  late final _split_data = _split_dataPtr
      .asFunction<CResult______u8 Function(int, ffi.Pointer<ffi.Char>)>();

  CResult_____c_char merge_data(
    ffi.Pointer<ffi.Char> drop,
  ) {
    return _merge_data(
      drop,
    );
  }

  late final _merge_dataPtr = _lookup<
          ffi
          .NativeFunction<CResult_____c_char Function(ffi.Pointer<ffi.Char>)>>(
      'merge_data');
  late final _merge_data = _merge_dataPtr
      .asFunction<CResult_____c_char Function(ffi.Pointer<ffi.Char>)>();

  CResult_____c_char get_tx_summary(
    ffi.Pointer<ffi.Char> tx,
  ) {
    return _get_tx_summary(
      tx,
    );
  }

  late final _get_tx_summaryPtr = _lookup<
          ffi
          .NativeFunction<CResult_____c_char Function(ffi.Pointer<ffi.Char>)>>(
      'get_tx_summary');
  late final _get_tx_summary = _get_tx_summaryPtr
      .asFunction<CResult_____c_char Function(ffi.Pointer<ffi.Char>)>();

  CResult_____c_char get_best_server(
    ffi.Pointer<ffi.Uint8> servers,
    int len,
  ) {
    return _get_best_server(
      servers,
      len,
    );
  }

  late final _get_best_serverPtr = _lookup<
      ffi.NativeFunction<
          CResult_____c_char Function(
              ffi.Pointer<ffi.Uint8>, ffi.Uint64)>>('get_best_server');
  late final _get_best_server = _get_best_serverPtr
      .asFunction<CResult_____c_char Function(ffi.Pointer<ffi.Uint8>, int)>();

  void import_from_zwl(
    int coin,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> data,
  ) {
    return _import_from_zwl(
      coin,
      name,
      data,
    );
  }

  late final _import_from_zwlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Uint8, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('import_from_zwl');
  late final _import_from_zwl = _import_from_zwlPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  CResult______u8 derive_zip32(
    int coin,
    int id_account,
    int account,
    int external1,
    int has_address,
    int address,
  ) {
    return _derive_zip32(
      coin,
      id_account,
      account,
      external1,
      has_address,
      address,
    );
  }

  late final _derive_zip32Ptr = _lookup<
      ffi.NativeFunction<
          CResult______u8 Function(ffi.Uint8, ffi.Uint32, ffi.Uint32,
              ffi.Uint32, bool, ffi.Uint32)>>('derive_zip32');
  late final _derive_zip32 = _derive_zip32Ptr
      .asFunction<CResult______u8 Function(int, int, int, int, int, int)>();

  CResult_u8 clear_tx_details(
    int coin,
    int account,
  ) {
    return _clear_tx_details(
      coin,
      account,
    );
  }

  late final _clear_tx_detailsPtr =
      _lookup<ffi.NativeFunction<CResult_u8 Function(ffi.Uint8, ffi.Uint32)>>(
          'clear_tx_details');
  late final _clear_tx_details =
      _clear_tx_detailsPtr.asFunction<CResult_u8 Function(int, int)>();

  CResult______u8 get_account_list(
    int coin,
  ) {
    return _get_account_list(
      coin,
    );
  }

  late final _get_account_listPtr =
      _lookup<ffi.NativeFunction<CResult______u8 Function(ffi.Uint8)>>(
          'get_account_list');
  late final _get_account_list =
      _get_account_listPtr.asFunction<CResult______u8 Function(int)>();

  CResult_u32 get_active_account(
    int coin,
  ) {
    return _get_active_account(
      coin,
    );
  }

  late final _get_active_accountPtr =
      _lookup<ffi.NativeFunction<CResult_u32 Function(ffi.Uint8)>>(
          'get_active_account');
  late final _get_active_account =
      _get_active_accountPtr.asFunction<CResult_u32 Function(int)>();

  CResult_u8 set_active_account(
    int coin,
    int id,
  ) {
    return _set_active_account(
      coin,
      id,
    );
  }

  late final _set_active_accountPtr =
      _lookup<ffi.NativeFunction<CResult_u8 Function(ffi.Uint8, ffi.Uint32)>>(
          'set_active_account');
  late final _set_active_account =
      _set_active_accountPtr.asFunction<CResult_u8 Function(int, int)>();

  CResult_____c_char get_t_addr(
    int coin,
    int id,
  ) {
    return _get_t_addr(
      coin,
      id,
    );
  }

  late final _get_t_addrPtr = _lookup<
          ffi
          .NativeFunction<CResult_____c_char Function(ffi.Uint8, ffi.Uint32)>>(
      'get_t_addr');
  late final _get_t_addr =
      _get_t_addrPtr.asFunction<CResult_____c_char Function(int, int)>();

  CResult_____c_char get_sk(
    int coin,
    int id,
  ) {
    return _get_sk(
      coin,
      id,
    );
  }

  late final _get_skPtr = _lookup<
          ffi
          .NativeFunction<CResult_____c_char Function(ffi.Uint8, ffi.Uint32)>>(
      'get_sk');
  late final _get_sk =
      _get_skPtr.asFunction<CResult_____c_char Function(int, int)>();

  CResult_u8 update_account_name(
    int coin,
    int id,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _update_account_name(
      coin,
      id,
      name,
    );
  }

  late final _update_account_namePtr = _lookup<
      ffi.NativeFunction<
          CResult_u8 Function(ffi.Uint8, ffi.Uint32,
              ffi.Pointer<ffi.Char>)>>('update_account_name');
  late final _update_account_name = _update_account_namePtr
      .asFunction<CResult_u8 Function(int, int, ffi.Pointer<ffi.Char>)>();

  CResult______u8 get_balances(
    int coin,
    int id,
    int confirmed_height,
  ) {
    return _get_balances(
      coin,
      id,
      confirmed_height,
    );
  }

  late final _get_balancesPtr = _lookup<
      ffi.NativeFunction<
          CResult______u8 Function(
              ffi.Uint8, ffi.Uint32, ffi.Uint32)>>('get_balances');
  late final _get_balances =
      _get_balancesPtr.asFunction<CResult______u8 Function(int, int, int)>();

  CResult______u8 get_db_height(
    int coin,
  ) {
    return _get_db_height(
      coin,
    );
  }

  late final _get_db_heightPtr =
      _lookup<ffi.NativeFunction<CResult______u8 Function(ffi.Uint8)>>(
          'get_db_height');
  late final _get_db_height =
      _get_db_heightPtr.asFunction<CResult______u8 Function(int)>();

  CResult______u8 get_notes(
    int coin,
    int id,
  ) {
    return _get_notes(
      coin,
      id,
    );
  }

  late final _get_notesPtr = _lookup<
          ffi.NativeFunction<CResult______u8 Function(ffi.Uint8, ffi.Uint32)>>(
      'get_notes');
  late final _get_notes =
      _get_notesPtr.asFunction<CResult______u8 Function(int, int)>();

  CResult______u8 get_txs(
    int coin,
    int id,
  ) {
    return _get_txs(
      coin,
      id,
    );
  }

  late final _get_txsPtr = _lookup<
          ffi.NativeFunction<CResult______u8 Function(ffi.Uint8, ffi.Uint32)>>(
      'get_txs');
  late final _get_txs =
      _get_txsPtr.asFunction<CResult______u8 Function(int, int)>();

  CResult______u8 get_messages(
    int coin,
    int id,
  ) {
    return _get_messages(
      coin,
      id,
    );
  }

  late final _get_messagesPtr = _lookup<
          ffi.NativeFunction<CResult______u8 Function(ffi.Uint8, ffi.Uint32)>>(
      'get_messages');
  late final _get_messages =
      _get_messagesPtr.asFunction<CResult______u8 Function(int, int)>();

  CResult______u8 get_prev_next_message(
    int coin,
    int id,
    ffi.Pointer<ffi.Char> subject,
    int height,
  ) {
    return _get_prev_next_message(
      coin,
      id,
      subject,
      height,
    );
  }

  late final _get_prev_next_messagePtr = _lookup<
      ffi.NativeFunction<
          CResult______u8 Function(ffi.Uint8, ffi.Uint32, ffi.Pointer<ffi.Char>,
              ffi.Uint32)>>('get_prev_next_message');
  late final _get_prev_next_message = _get_prev_next_messagePtr.asFunction<
      CResult______u8 Function(int, int, ffi.Pointer<ffi.Char>, int)>();

  CResult______u8 get_templates(
    int coin,
  ) {
    return _get_templates(
      coin,
    );
  }

  late final _get_templatesPtr =
      _lookup<ffi.NativeFunction<CResult______u8 Function(ffi.Uint8)>>(
          'get_templates');
  late final _get_templates =
      _get_templatesPtr.asFunction<CResult______u8 Function(int)>();

  CResult_u32 save_send_template(
    int coin,
    ffi.Pointer<ffi.Uint8> template_,
    int len,
  ) {
    return _save_send_template(
      coin,
      template_,
      len,
    );
  }

  late final _save_send_templatePtr = _lookup<
      ffi.NativeFunction<
          CResult_u32 Function(ffi.Uint8, ffi.Pointer<ffi.Uint8>,
              ffi.Uint64)>>('save_send_template');
  late final _save_send_template = _save_send_templatePtr
      .asFunction<CResult_u32 Function(int, ffi.Pointer<ffi.Uint8>, int)>();

  CResult_u8 delete_send_template(
    int coin,
    int id,
  ) {
    return _delete_send_template(
      coin,
      id,
    );
  }

  late final _delete_send_templatePtr =
      _lookup<ffi.NativeFunction<CResult_u8 Function(ffi.Uint8, ffi.Uint32)>>(
          'delete_send_template');
  late final _delete_send_template =
      _delete_send_templatePtr.asFunction<CResult_u8 Function(int, int)>();

  CResult______u8 get_contacts(
    int coin,
  ) {
    return _get_contacts(
      coin,
    );
  }

  late final _get_contactsPtr =
      _lookup<ffi.NativeFunction<CResult______u8 Function(ffi.Uint8)>>(
          'get_contacts');
  late final _get_contacts =
      _get_contactsPtr.asFunction<CResult______u8 Function(int)>();

  CResult______u8 get_pnl_txs(
    int coin,
    int id,
    int timestamp,
  ) {
    return _get_pnl_txs(
      coin,
      id,
      timestamp,
    );
  }

  late final _get_pnl_txsPtr = _lookup<
      ffi.NativeFunction<
          CResult______u8 Function(
              ffi.Uint8, ffi.Uint32, ffi.Uint32)>>('get_pnl_txs');
  late final _get_pnl_txs =
      _get_pnl_txsPtr.asFunction<CResult______u8 Function(int, int, int)>();

  CResult______u8 get_historical_prices(
    int coin,
    int timestamp,
    ffi.Pointer<ffi.Char> currency,
  ) {
    return _get_historical_prices(
      coin,
      timestamp,
      currency,
    );
  }

  late final _get_historical_pricesPtr = _lookup<
      ffi.NativeFunction<
          CResult______u8 Function(ffi.Uint8, ffi.Uint32,
              ffi.Pointer<ffi.Char>)>>('get_historical_prices');
  late final _get_historical_prices = _get_historical_pricesPtr
      .asFunction<CResult______u8 Function(int, int, ffi.Pointer<ffi.Char>)>();

  CResult______u8 get_spendings(
    int coin,
    int id,
    int timestamp,
  ) {
    return _get_spendings(
      coin,
      id,
      timestamp,
    );
  }

  late final _get_spendingsPtr = _lookup<
      ffi.NativeFunction<
          CResult______u8 Function(
              ffi.Uint8, ffi.Uint32, ffi.Uint32)>>('get_spendings');
  late final _get_spendings =
      _get_spendingsPtr.asFunction<CResult______u8 Function(int, int, int)>();

  CResult_u8 update_excluded(
    int coin,
    int id,
    int excluded,
  ) {
    return _update_excluded(
      coin,
      id,
      excluded,
    );
  }

  late final _update_excludedPtr = _lookup<
          ffi.NativeFunction<CResult_u8 Function(ffi.Uint8, ffi.Uint32, bool)>>(
      'update_excluded');
  late final _update_excluded =
      _update_excludedPtr.asFunction<CResult_u8 Function(int, int, int)>();

  CResult_u8 invert_excluded(
    int coin,
    int id,
  ) {
    return _invert_excluded(
      coin,
      id,
    );
  }

  late final _invert_excludedPtr =
      _lookup<ffi.NativeFunction<CResult_u8 Function(ffi.Uint8, ffi.Uint32)>>(
          'invert_excluded');
  late final _invert_excluded =
      _invert_excludedPtr.asFunction<CResult_u8 Function(int, int)>();

  CResult______u8 get_checkpoints(
    int coin,
  ) {
    return _get_checkpoints(
      coin,
    );
  }

  late final _get_checkpointsPtr =
      _lookup<ffi.NativeFunction<CResult______u8 Function(ffi.Uint8)>>(
          'get_checkpoints');
  late final _get_checkpoints =
      _get_checkpointsPtr.asFunction<CResult______u8 Function(int)>();

  CResult_bool decrypt_db(
    ffi.Pointer<ffi.Char> db_path,
    ffi.Pointer<ffi.Char> passwd,
  ) {
    return _decrypt_db(
      db_path,
      passwd,
    );
  }

  late final _decrypt_dbPtr = _lookup<
      ffi.NativeFunction<
          CResult_bool Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('decrypt_db');
  late final _decrypt_db = _decrypt_dbPtr.asFunction<
      CResult_bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  CResult_u8 clone_db_with_passwd(
    int coin,
    ffi.Pointer<ffi.Char> temp_path,
    ffi.Pointer<ffi.Char> passwd,
  ) {
    return _clone_db_with_passwd(
      coin,
      temp_path,
      passwd,
    );
  }

  late final _clone_db_with_passwdPtr = _lookup<
      ffi.NativeFunction<
          CResult_u8 Function(ffi.Uint8, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('clone_db_with_passwd');
  late final _clone_db_with_passwd = _clone_db_with_passwdPtr.asFunction<
      CResult_u8 Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  CResult_____c_char get_property(
    int coin,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _get_property(
      coin,
      name,
    );
  }

  late final _get_propertyPtr = _lookup<
      ffi.NativeFunction<
          CResult_____c_char Function(
              ffi.Uint8, ffi.Pointer<ffi.Char>)>>('get_property');
  late final _get_property = _get_propertyPtr
      .asFunction<CResult_____c_char Function(int, ffi.Pointer<ffi.Char>)>();

  CResult_u8 set_property(
    int coin,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _set_property(
      coin,
      name,
      value,
    );
  }

  late final _set_propertyPtr = _lookup<
      ffi.NativeFunction<
          CResult_u8 Function(ffi.Uint8, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('set_property');
  late final _set_property = _set_propertyPtr.asFunction<
      CResult_u8 Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  CResult_____c_char ledger_send(
    int coin,
    ffi.Pointer<ffi.Char> tx_plan,
  ) {
    return _ledger_send(
      coin,
      tx_plan,
    );
  }

  late final _ledger_sendPtr = _lookup<
      ffi.NativeFunction<
          CResult_____c_char Function(
              ffi.Uint8, ffi.Pointer<ffi.Char>)>>('ledger_send');
  late final _ledger_send = _ledger_sendPtr
      .asFunction<CResult_____c_char Function(int, ffi.Pointer<ffi.Char>)>();

  CResult_u32 ledger_import_account(
    int coin,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _ledger_import_account(
      coin,
      name,
    );
  }

  late final _ledger_import_accountPtr = _lookup<
      ffi.NativeFunction<
          CResult_u32 Function(
              ffi.Uint8, ffi.Pointer<ffi.Char>)>>('ledger_import_account');
  late final _ledger_import_account = _ledger_import_accountPtr
      .asFunction<CResult_u32 Function(int, ffi.Pointer<ffi.Char>)>();

  CResult_bool ledger_has_account(
    int coin,
    int account,
  ) {
    return _ledger_has_account(
      coin,
      account,
    );
  }

  late final _ledger_has_accountPtr =
      _lookup<ffi.NativeFunction<CResult_bool Function(ffi.Uint8, ffi.Uint32)>>(
          'ledger_has_account');
  late final _ledger_has_account =
      _ledger_has_accountPtr.asFunction<CResult_bool Function(int, int)>();

  int has_cuda() {
    return _has_cuda();
  }

  late final _has_cudaPtr =
      _lookup<ffi.NativeFunction<bool Function()>>('has_cuda');
  late final _has_cuda = _has_cudaPtr.asFunction<int Function()>();

  int has_metal() {
    return _has_metal();
  }

  late final _has_metalPtr =
      _lookup<ffi.NativeFunction<bool Function()>>('has_metal');
  late final _has_metal = _has_metalPtr.asFunction<int Function()>();

  int has_gpu() {
    return _has_gpu();
  }

  late final _has_gpuPtr =
      _lookup<ffi.NativeFunction<bool Function()>>('has_gpu');
  late final _has_gpu = _has_gpuPtr.asFunction<int Function()>();

  void use_gpu(
    int v,
  ) {
    return _use_gpu(
      v,
    );
  }

  late final _use_gpuPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(bool)>>('use_gpu');
  late final _use_gpu = _use_gpuPtr.asFunction<void Function(int)>();
}

final class CResult_u8 extends ffi.Struct {
  @ffi.Uint8()
  external int value;

  external ffi.Pointer<ffi.Char> error;

  @ffi.Uint32()
  external int len;
}

final class CResult_u32 extends ffi.Struct {
  @ffi.Uint32()
  external int value;

  external ffi.Pointer<ffi.Char> error;

  @ffi.Uint32()
  external int len;
}

final class CResult______u8 extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> value;

  external ffi.Pointer<ffi.Char> error;

  @ffi.Uint32()
  external int len;
}

final class CResult_____c_char extends ffi.Struct {
  external ffi.Pointer<ffi.Char> value;

  external ffi.Pointer<ffi.Char> error;

  @ffi.Uint32()
  external int len;
}

final class CResult_u64 extends ffi.Struct {
  @ffi.Uint64()
  external int value;

  external ffi.Pointer<ffi.Char> error;

  @ffi.Uint32()
  external int len;
}

final class CResult_bool extends ffi.Struct {
  @bool()
  external int value;

  external ffi.Pointer<ffi.Char> error;

  @ffi.Uint32()
  external int len;
}

typedef bool = ffi.Char;
typedef DartPostCObjectFnType = ffi.Pointer<ffi.Void>;

const int EXPIRY_HEIGHT_OFFSET = 50;

const int QR_DATA_SIZE = 256;

const int MAX_ATTEMPTS = 10;

const int N = 200000;

const int Account_VT_ID = 4;

const int Account_VT_NAME = 6;

const int Account_VT_KEY_TYPE = 8;

const int Account_VT_BALANCE = 10;

const int AccountVec_VT_ACCOUNTS = 4;

const int Balance_VT_SHIELDED = 4;

const int Balance_VT_UNCONFIRMED_SPENT = 6;

const int Balance_VT_UNDER_CONFIRMED = 10;

const int Balance_VT_EXCLUDED = 12;

const int Balance_VT_SAPLING = 14;

const int Balance_VT_ORCHARD = 16;

const int Height_VT_HEIGHT = 4;

const int Height_VT_TIMESTAMP = 6;

const int ShieldedNote_VT_VALUE = 8;

const int ShieldedNote_VT_SPENT = 16;

const int ShieldedNoteVec_VT_NOTES = 4;

const int ShieldedTx_VT_TX_ID = 6;

const int ShieldedTx_VT_SHORT_TX_ID = 10;

const int ShieldedTx_VT_ADDRESS = 18;

const int ShieldedTx_VT_MEMO = 20;

const int ShieldedTxVec_VT_TXS = 4;

const int Message_VT_ID_MSG = 4;

const int Message_VT_ID_TX = 6;

const int Message_VT_FROM = 12;

const int Message_VT_TO = 14;

const int Message_VT_SUBJECT = 16;

const int Message_VT_BODY = 18;

const int Message_VT_READ = 20;

const int Message_VT_INCOMING = 22;

const int MessageVec_VT_MESSAGES = 4;

const int PrevNext_VT_PREV = 4;

const int PrevNext_VT_NEXT = 6;

const int SendTemplate_VT_TITLE = 6;

const int SendTemplate_VT_AMOUNT = 10;

const int SendTemplate_VT_FIAT_AMOUNT = 12;

const int SendTemplate_VT_FEE_INCLUDED = 14;

const int SendTemplate_VT_FIAT = 16;

const int SendTemplate_VT_INCLUDE_REPLY_TO = 18;

const int SendTemplateVec_VT_TEMPLATES = 4;

const int ContactVec_VT_CONTACTS = 4;

const int TxTimeValueVec_VT_VALUES = 4;

const int Quote_VT_PRICE = 6;

const int Spending_VT_RECIPIENT = 4;

const int AddressBalance_VT_INDEX = 4;

const int Backup_VT_SEED = 6;

const int Backup_VT_SK = 10;

const int Backup_VT_FVK = 12;

const int Backup_VT_UVK = 14;

const int RaptorQDrops_VT_DROPS = 4;

const int AGEKeys_VT_PK = 6;

const int Servers_VT_URLS = 4;

const int Progress_VT_TRIAL_DECRYPTIONS = 6;

const int Progress_VT_DOWNLOADED = 8;

const int KeyPack_VT_T_ADDR = 4;

const int KeyPack_VT_T_KEY = 6;

const int KeyPack_VT_Z_ADDR = 8;

const int KeyPack_VT_Z_KEY = 10;

const int Recipient_VT_REPLY_TO = 10;

const int Recipient_VT_MAX_AMOUNT_PER_NOTE = 16;

const int UnsignedTxSummary_VT_RECIPIENTS = 4;

const int TxOutput_VT_POOL = 10;

const int TxReport_VT_OUTPUTS = 4;

const int TxReport_VT_TRANSPARENT = 6;

const int TxReport_VT_NET_SAPLING = 12;

const int TxReport_VT_NET_ORCHARD = 14;

const int TxReport_VT_FEE = 16;

const int TxReport_VT_PRIVACY_LEVEL = 18;

const int Fee_VT_MIN_FEE = 6;

const int Fee_VT_MAX_FEE = 8;

const int Fee_VT_SCHEME = 10;
