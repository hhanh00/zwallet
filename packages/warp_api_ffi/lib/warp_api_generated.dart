// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void dummy_export() {
    return _dummy_export();
  }

  late final _dummy_export_ptr =
      _lookup<ffi.NativeFunction<_c_dummy_export>>('dummy_export');
  late final _dart_dummy_export _dummy_export =
      _dummy_export_ptr.asFunction<_dart_dummy_export>();

  void dart_post_cobject(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _dart_post_cobject(
      ptr,
    );
  }

  late final _dart_post_cobject_ptr =
      _lookup<ffi.NativeFunction<_c_dart_post_cobject>>('dart_post_cobject');
  late final _dart_dart_post_cobject _dart_post_cobject =
      _dart_post_cobject_ptr.asFunction<_dart_dart_post_cobject>();

  void deallocate_str(
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _deallocate_str(
      s,
    );
  }

  late final _deallocate_str_ptr =
      _lookup<ffi.NativeFunction<_c_deallocate_str>>('deallocate_str');
  late final _dart_deallocate_str _deallocate_str =
      _deallocate_str_ptr.asFunction<_dart_deallocate_str>();

  void deallocate_bytes(
    ffi.Pointer<ffi.Uint8> ptr,
    int len,
  ) {
    return _deallocate_bytes(
      ptr,
      len,
    );
  }

  late final _deallocate_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_deallocate_bytes>>('deallocate_bytes');
  late final _dart_deallocate_bytes _deallocate_bytes =
      _deallocate_bytes_ptr.asFunction<_dart_deallocate_bytes>();

  CResult_u8 init_wallet(
    int coin,
    ffi.Pointer<ffi.Int8> db_path,
  ) {
    return _init_wallet(
      coin,
      db_path,
    );
  }

  late final _init_wallet_ptr =
      _lookup<ffi.NativeFunction<_c_init_wallet>>('init_wallet');
  late final _dart_init_wallet _init_wallet =
      _init_wallet_ptr.asFunction<_dart_init_wallet>();

  CResult_u8 migrate_db(
    int coin,
    ffi.Pointer<ffi.Int8> db_path,
  ) {
    return _migrate_db(
      coin,
      db_path,
    );
  }

  late final _migrate_db_ptr =
      _lookup<ffi.NativeFunction<_c_migrate_db>>('migrate_db');
  late final _dart_migrate_db _migrate_db =
      _migrate_db_ptr.asFunction<_dart_migrate_db>();

  CResult_u8 migrate_data_db(
    int coin,
  ) {
    return _migrate_data_db(
      coin,
    );
  }

  late final _migrate_data_db_ptr =
      _lookup<ffi.NativeFunction<_c_migrate_data_db>>('migrate_data_db');
  late final _dart_migrate_data_db _migrate_data_db =
      _migrate_data_db_ptr.asFunction<_dart_migrate_data_db>();

  void set_active(
    int active,
  ) {
    return _set_active(
      active,
    );
  }

  late final _set_active_ptr =
      _lookup<ffi.NativeFunction<_c_set_active>>('set_active');
  late final _dart_set_active _set_active =
      _set_active_ptr.asFunction<_dart_set_active>();

  void set_coin_lwd_url(
    int coin,
    ffi.Pointer<ffi.Int8> lwd_url,
  ) {
    return _set_coin_lwd_url(
      coin,
      lwd_url,
    );
  }

  late final _set_coin_lwd_url_ptr =
      _lookup<ffi.NativeFunction<_c_set_coin_lwd_url>>('set_coin_lwd_url');
  late final _dart_set_coin_lwd_url _set_coin_lwd_url =
      _set_coin_lwd_url_ptr.asFunction<_dart_set_coin_lwd_url>();

  ffi.Pointer<ffi.Int8> get_lwd_url(
    int coin,
  ) {
    return _get_lwd_url(
      coin,
    );
  }

  late final _get_lwd_url_ptr =
      _lookup<ffi.NativeFunction<_c_get_lwd_url>>('get_lwd_url');
  late final _dart_get_lwd_url _get_lwd_url =
      _get_lwd_url_ptr.asFunction<_dart_get_lwd_url>();

  void set_coin_passwd(
    int coin,
    ffi.Pointer<ffi.Int8> passwd,
  ) {
    return _set_coin_passwd(
      coin,
      passwd,
    );
  }

  late final _set_coin_passwd_ptr =
      _lookup<ffi.NativeFunction<_c_set_coin_passwd>>('set_coin_passwd');
  late final _dart_set_coin_passwd _set_coin_passwd =
      _set_coin_passwd_ptr.asFunction<_dart_set_coin_passwd>();

  void reset_app() {
    return _reset_app();
  }

  late final _reset_app_ptr =
      _lookup<ffi.NativeFunction<_c_reset_app>>('reset_app');
  late final _dart_reset_app _reset_app =
      _reset_app_ptr.asFunction<_dart_reset_app>();

  void mempool_run(
    int port,
  ) {
    return _mempool_run(
      port,
    );
  }

  late final _mempool_run_ptr =
      _lookup<ffi.NativeFunction<_c_mempool_run>>('mempool_run');
  late final _dart_mempool_run _mempool_run =
      _mempool_run_ptr.asFunction<_dart_mempool_run>();

  void mempool_set_active(
    int coin,
    int id_account,
  ) {
    return _mempool_set_active(
      coin,
      id_account,
    );
  }

  late final _mempool_set_active_ptr =
      _lookup<ffi.NativeFunction<_c_mempool_set_active>>('mempool_set_active');
  late final _dart_mempool_set_active _mempool_set_active =
      _mempool_set_active_ptr.asFunction<_dart_mempool_set_active>();

  CResult_u32 new_account(
    int coin,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> data,
    int index,
  ) {
    return _new_account(
      coin,
      name,
      data,
      index,
    );
  }

  late final _new_account_ptr =
      _lookup<ffi.NativeFunction<_c_new_account>>('new_account');
  late final _dart_new_account _new_account =
      _new_account_ptr.asFunction<_dart_new_account>();

  void new_sub_account(
    ffi.Pointer<ffi.Int8> name,
    int index,
    int count,
  ) {
    return _new_sub_account(
      name,
      index,
      count,
    );
  }

  late final _new_sub_account_ptr =
      _lookup<ffi.NativeFunction<_c_new_sub_account>>('new_sub_account');
  late final _dart_new_sub_account _new_sub_account =
      _new_sub_account_ptr.asFunction<_dart_new_sub_account>();

  CResult_u8 convert_to_watchonly(
    int coin,
    int id_account,
  ) {
    return _convert_to_watchonly(
      coin,
      id_account,
    );
  }

  late final _convert_to_watchonly_ptr =
      _lookup<ffi.NativeFunction<_c_convert_to_watchonly>>(
          'convert_to_watchonly');
  late final _dart_convert_to_watchonly _convert_to_watchonly =
      _convert_to_watchonly_ptr.asFunction<_dart_convert_to_watchonly>();

  CResult______u8 get_backup(
    int coin,
    int id_account,
  ) {
    return _get_backup(
      coin,
      id_account,
    );
  }

  late final _get_backup_ptr =
      _lookup<ffi.NativeFunction<_c_get_backup>>('get_backup');
  late final _dart_get_backup _get_backup =
      _get_backup_ptr.asFunction<_dart_get_backup>();

  CResult_u8 get_available_addrs(
    int coin,
    int account,
  ) {
    return _get_available_addrs(
      coin,
      account,
    );
  }

  late final _get_available_addrs_ptr =
      _lookup<ffi.NativeFunction<_c_get_available_addrs>>(
          'get_available_addrs');
  late final _dart_get_available_addrs _get_available_addrs =
      _get_available_addrs_ptr.asFunction<_dart_get_available_addrs>();

  CResult_____c_char get_address(
    int coin,
    int id_account,
    int ua_type,
  ) {
    return _get_address(
      coin,
      id_account,
      ua_type,
    );
  }

  late final _get_address_ptr =
      _lookup<ffi.NativeFunction<_c_get_address>>('get_address');
  late final _dart_get_address _get_address =
      _get_address_ptr.asFunction<_dart_get_address>();

  void import_transparent_key(
    int coin,
    int id_account,
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _import_transparent_key(
      coin,
      id_account,
      path,
    );
  }

  late final _import_transparent_key_ptr =
      _lookup<ffi.NativeFunction<_c_import_transparent_key>>(
          'import_transparent_key');
  late final _dart_import_transparent_key _import_transparent_key =
      _import_transparent_key_ptr.asFunction<_dart_import_transparent_key>();

  void import_transparent_secret_key(
    int coin,
    int id_account,
    ffi.Pointer<ffi.Int8> secret_key,
  ) {
    return _import_transparent_secret_key(
      coin,
      id_account,
      secret_key,
    );
  }

  late final _import_transparent_secret_key_ptr =
      _lookup<ffi.NativeFunction<_c_import_transparent_secret_key>>(
          'import_transparent_secret_key');
  late final _dart_import_transparent_secret_key
      _import_transparent_secret_key = _import_transparent_secret_key_ptr
          .asFunction<_dart_import_transparent_secret_key>();

  void cancel_warp() {
    return _cancel_warp();
  }

  late final _cancel_warp_ptr =
      _lookup<ffi.NativeFunction<_c_cancel_warp>>('cancel_warp');
  late final _dart_cancel_warp _cancel_warp =
      _cancel_warp_ptr.asFunction<_dart_cancel_warp>();

  CResult_u8 warp(
    int coin,
    int get_tx,
    int anchor_offset,
    int max_cost,
    int port,
  ) {
    return _warp(
      coin,
      get_tx,
      anchor_offset,
      max_cost,
      port,
    );
  }

  late final _warp_ptr = _lookup<ffi.NativeFunction<_c_warp>>('warp');
  late final _dart_warp _warp = _warp_ptr.asFunction<_dart_warp>();

  int is_valid_key(
    int coin,
    ffi.Pointer<ffi.Int8> key,
  ) {
    return _is_valid_key(
      coin,
      key,
    );
  }

  late final _is_valid_key_ptr =
      _lookup<ffi.NativeFunction<_c_is_valid_key>>('is_valid_key');
  late final _dart_is_valid_key _is_valid_key =
      _is_valid_key_ptr.asFunction<_dart_is_valid_key>();

  int valid_address(
    int coin,
    ffi.Pointer<ffi.Int8> address,
  ) {
    return _valid_address(
      coin,
      address,
    );
  }

  late final _valid_address_ptr =
      _lookup<ffi.NativeFunction<_c_valid_address>>('valid_address');
  late final _dart_valid_address _valid_address =
      _valid_address_ptr.asFunction<_dart_valid_address>();

  CResult_____c_char get_diversified_address(
    int ua_type,
    int time,
  ) {
    return _get_diversified_address(
      ua_type,
      time,
    );
  }

  late final _get_diversified_address_ptr =
      _lookup<ffi.NativeFunction<_c_get_diversified_address>>(
          'get_diversified_address');
  late final _dart_get_diversified_address _get_diversified_address =
      _get_diversified_address_ptr.asFunction<_dart_get_diversified_address>();

  CResult_u32 get_latest_height() {
    return _get_latest_height();
  }

  late final _get_latest_height_ptr =
      _lookup<ffi.NativeFunction<_c_get_latest_height>>('get_latest_height');
  late final _dart_get_latest_height _get_latest_height =
      _get_latest_height_ptr.asFunction<_dart_get_latest_height>();

  CResult_u8 ledger_build_keys() {
    return _ledger_build_keys();
  }

  late final _ledger_build_keys_ptr =
      _lookup<ffi.NativeFunction<_c_ledger_build_keys>>('ledger_build_keys');
  late final _dart_ledger_build_keys _ledger_build_keys =
      _ledger_build_keys_ptr.asFunction<_dart_ledger_build_keys>();

  CResult_____c_char ledger_get_fvk(
    int coin,
  ) {
    return _ledger_get_fvk(
      coin,
    );
  }

  late final _ledger_get_fvk_ptr =
      _lookup<ffi.NativeFunction<_c_ledger_get_fvk>>('ledger_get_fvk');
  late final _dart_ledger_get_fvk _ledger_get_fvk =
      _ledger_get_fvk_ptr.asFunction<_dart_ledger_get_fvk>();

  CResult_____c_char ledger_get_address() {
    return _ledger_get_address();
  }

  late final _ledger_get_address_ptr =
      _lookup<ffi.NativeFunction<_c_ledger_get_address>>('ledger_get_address');
  late final _dart_ledger_get_address _ledger_get_address =
      _ledger_get_address_ptr.asFunction<_dart_ledger_get_address>();

  void skip_to_last_height(
    int coin,
  ) {
    return _skip_to_last_height(
      coin,
    );
  }

  late final _skip_to_last_height_ptr =
      _lookup<ffi.NativeFunction<_c_skip_to_last_height>>(
          'skip_to_last_height');
  late final _dart_skip_to_last_height _skip_to_last_height =
      _skip_to_last_height_ptr.asFunction<_dart_skip_to_last_height>();

  CResult_u32 rewind_to(
    int height,
  ) {
    return _rewind_to(
      height,
    );
  }

  late final _rewind_to_ptr =
      _lookup<ffi.NativeFunction<_c_rewind_to>>('rewind_to');
  late final _dart_rewind_to _rewind_to =
      _rewind_to_ptr.asFunction<_dart_rewind_to>();

  void rescan_from(
    int height,
  ) {
    return _rescan_from(
      height,
    );
  }

  late final _rescan_from_ptr =
      _lookup<ffi.NativeFunction<_c_rescan_from>>('rescan_from');
  late final _dart_rescan_from _rescan_from =
      _rescan_from_ptr.asFunction<_dart_rescan_from>();

  CResult_u64 get_taddr_balance(
    int coin,
    int id_account,
  ) {
    return _get_taddr_balance(
      coin,
      id_account,
    );
  }

  late final _get_taddr_balance_ptr =
      _lookup<ffi.NativeFunction<_c_get_taddr_balance>>('get_taddr_balance');
  late final _dart_get_taddr_balance _get_taddr_balance =
      _get_taddr_balance_ptr.asFunction<_dart_get_taddr_balance>();

  CResult_____c_char transfer_pools(
    int coin,
    int account,
    int from_pool,
    int to_pool,
    int amount,
    int fee_included,
    ffi.Pointer<ffi.Int8> memo,
    int split_amount,
    int confirmations,
  ) {
    return _transfer_pools(
      coin,
      account,
      from_pool,
      to_pool,
      amount,
      fee_included,
      memo,
      split_amount,
      confirmations,
    );
  }

  late final _transfer_pools_ptr =
      _lookup<ffi.NativeFunction<_c_transfer_pools>>('transfer_pools');
  late final _dart_transfer_pools _transfer_pools =
      _transfer_pools_ptr.asFunction<_dart_transfer_pools>();

  CResult_____c_char shield_taddr(
    int coin,
    int account,
    int amount,
    int confirmations,
  ) {
    return _shield_taddr(
      coin,
      account,
      amount,
      confirmations,
    );
  }

  late final _shield_taddr_ptr =
      _lookup<ffi.NativeFunction<_c_shield_taddr>>('shield_taddr');
  late final _dart_shield_taddr _shield_taddr =
      _shield_taddr_ptr.asFunction<_dart_shield_taddr>();

  CResult______u8 scan_transparent_accounts(
    int coin,
    int account,
    int gap_limit,
  ) {
    return _scan_transparent_accounts(
      coin,
      account,
      gap_limit,
    );
  }

  late final _scan_transparent_accounts_ptr =
      _lookup<ffi.NativeFunction<_c_scan_transparent_accounts>>(
          'scan_transparent_accounts');
  late final _dart_scan_transparent_accounts _scan_transparent_accounts =
      _scan_transparent_accounts_ptr
          .asFunction<_dart_scan_transparent_accounts>();

  CResult_____c_char prepare_multi_payment(
    int coin,
    int account,
    ffi.Pointer<ffi.Uint8> recipients_bytes,
    int recipients_len,
    int anchor_offset,
  ) {
    return _prepare_multi_payment(
      coin,
      account,
      recipients_bytes,
      recipients_len,
      anchor_offset,
    );
  }

  late final _prepare_multi_payment_ptr =
      _lookup<ffi.NativeFunction<_c_prepare_multi_payment>>(
          'prepare_multi_payment');
  late final _dart_prepare_multi_payment _prepare_multi_payment =
      _prepare_multi_payment_ptr.asFunction<_dart_prepare_multi_payment>();

  CResult______u8 transaction_report(
    int coin,
    ffi.Pointer<ffi.Int8> plan,
  ) {
    return _transaction_report(
      coin,
      plan,
    );
  }

  late final _transaction_report_ptr =
      _lookup<ffi.NativeFunction<_c_transaction_report>>('transaction_report');
  late final _dart_transaction_report _transaction_report =
      _transaction_report_ptr.asFunction<_dart_transaction_report>();

  CResult_____c_char sign(
    int coin,
    int account,
    ffi.Pointer<ffi.Int8> tx_plan,
    int _port,
  ) {
    return _sign(
      coin,
      account,
      tx_plan,
      _port,
    );
  }

  late final _sign_ptr = _lookup<ffi.NativeFunction<_c_sign>>('sign');
  late final _dart_sign _sign = _sign_ptr.asFunction<_dart_sign>();

  CResult_____c_char sign_and_broadcast(
    int coin,
    int account,
    ffi.Pointer<ffi.Int8> tx_plan,
  ) {
    return _sign_and_broadcast(
      coin,
      account,
      tx_plan,
    );
  }

  late final _sign_and_broadcast_ptr =
      _lookup<ffi.NativeFunction<_c_sign_and_broadcast>>('sign_and_broadcast');
  late final _dart_sign_and_broadcast _sign_and_broadcast =
      _sign_and_broadcast_ptr.asFunction<_dart_sign_and_broadcast>();

  CResult_____c_char broadcast_tx(
    ffi.Pointer<ffi.Int8> tx_str,
  ) {
    return _broadcast_tx(
      tx_str,
    );
  }

  late final _broadcast_tx_ptr =
      _lookup<ffi.NativeFunction<_c_broadcast_tx>>('broadcast_tx');
  late final _dart_broadcast_tx _broadcast_tx =
      _broadcast_tx_ptr.asFunction<_dart_broadcast_tx>();

  int is_valid_tkey(
    ffi.Pointer<ffi.Int8> sk,
  ) {
    return _is_valid_tkey(
      sk,
    );
  }

  late final _is_valid_tkey_ptr =
      _lookup<ffi.NativeFunction<_c_is_valid_tkey>>('is_valid_tkey');
  late final _dart_is_valid_tkey _is_valid_tkey =
      _is_valid_tkey_ptr.asFunction<_dart_is_valid_tkey>();

  CResult_____c_char sweep_tkey(
    int last_height,
    ffi.Pointer<ffi.Int8> sk,
    int pool,
    int confirmations,
  ) {
    return _sweep_tkey(
      last_height,
      sk,
      pool,
      confirmations,
    );
  }

  late final _sweep_tkey_ptr =
      _lookup<ffi.NativeFunction<_c_sweep_tkey>>('sweep_tkey');
  late final _dart_sweep_tkey _sweep_tkey =
      _sweep_tkey_ptr.asFunction<_dart_sweep_tkey>();

  CResult_u32 get_activation_date() {
    return _get_activation_date();
  }

  late final _get_activation_date_ptr =
      _lookup<ffi.NativeFunction<_c_get_activation_date>>(
          'get_activation_date');
  late final _dart_get_activation_date _get_activation_date =
      _get_activation_date_ptr.asFunction<_dart_get_activation_date>();

  CResult_u32 get_block_by_time(
    int time,
  ) {
    return _get_block_by_time(
      time,
    );
  }

  late final _get_block_by_time_ptr =
      _lookup<ffi.NativeFunction<_c_get_block_by_time>>('get_block_by_time');
  late final _dart_get_block_by_time _get_block_by_time =
      _get_block_by_time_ptr.asFunction<_dart_get_block_by_time>();

  CResult_u32 sync_historical_prices(
    int now,
    int days,
    ffi.Pointer<ffi.Int8> currency,
  ) {
    return _sync_historical_prices(
      now,
      days,
      currency,
    );
  }

  late final _sync_historical_prices_ptr =
      _lookup<ffi.NativeFunction<_c_sync_historical_prices>>(
          'sync_historical_prices');
  late final _dart_sync_historical_prices _sync_historical_prices =
      _sync_historical_prices_ptr.asFunction<_dart_sync_historical_prices>();

  void store_contact(
    int id,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> address,
    int dirty,
  ) {
    return _store_contact(
      id,
      name,
      address,
      dirty,
    );
  }

  late final _store_contact_ptr =
      _lookup<ffi.NativeFunction<_c_store_contact>>('store_contact');
  late final _dart_store_contact _store_contact =
      _store_contact_ptr.asFunction<_dart_store_contact>();

  CResult_____c_char commit_unsaved_contacts(
    int anchor_offset,
  ) {
    return _commit_unsaved_contacts(
      anchor_offset,
    );
  }

  late final _commit_unsaved_contacts_ptr =
      _lookup<ffi.NativeFunction<_c_commit_unsaved_contacts>>(
          'commit_unsaved_contacts');
  late final _dart_commit_unsaved_contacts _commit_unsaved_contacts =
      _commit_unsaved_contacts_ptr.asFunction<_dart_commit_unsaved_contacts>();

  void mark_message_read(
    int message,
    int read,
  ) {
    return _mark_message_read(
      message,
      read,
    );
  }

  late final _mark_message_read_ptr =
      _lookup<ffi.NativeFunction<_c_mark_message_read>>('mark_message_read');
  late final _dart_mark_message_read _mark_message_read =
      _mark_message_read_ptr.asFunction<_dart_mark_message_read>();

  void mark_all_messages_read(
    int read,
  ) {
    return _mark_all_messages_read(
      read,
    );
  }

  late final _mark_all_messages_read_ptr =
      _lookup<ffi.NativeFunction<_c_mark_all_messages_read>>(
          'mark_all_messages_read');
  late final _dart_mark_all_messages_read _mark_all_messages_read =
      _mark_all_messages_read_ptr.asFunction<_dart_mark_all_messages_read>();

  void truncate_data() {
    return _truncate_data();
  }

  late final _truncate_data_ptr =
      _lookup<ffi.NativeFunction<_c_truncate_data>>('truncate_data');
  late final _dart_truncate_data _truncate_data =
      _truncate_data_ptr.asFunction<_dart_truncate_data>();

  void truncate_sync_data() {
    return _truncate_sync_data();
  }

  late final _truncate_sync_data_ptr =
      _lookup<ffi.NativeFunction<_c_truncate_sync_data>>('truncate_sync_data');
  late final _dart_truncate_sync_data _truncate_sync_data =
      _truncate_sync_data_ptr.asFunction<_dart_truncate_sync_data>();

  int check_account(
    int coin,
    int account,
  ) {
    return _check_account(
      coin,
      account,
    );
  }

  late final _check_account_ptr =
      _lookup<ffi.NativeFunction<_c_check_account>>('check_account');
  late final _dart_check_account _check_account =
      _check_account_ptr.asFunction<_dart_check_account>();

  void delete_account(
    int coin,
    int account,
  ) {
    return _delete_account(
      coin,
      account,
    );
  }

  late final _delete_account_ptr =
      _lookup<ffi.NativeFunction<_c_delete_account>>('delete_account');
  late final _dart_delete_account _delete_account =
      _delete_account_ptr.asFunction<_dart_delete_account>();

  CResult_____c_char make_payment_uri(
    int coin,
    ffi.Pointer<ffi.Int8> address,
    int amount,
    ffi.Pointer<ffi.Int8> memo,
  ) {
    return _make_payment_uri(
      coin,
      address,
      amount,
      memo,
    );
  }

  late final _make_payment_uri_ptr =
      _lookup<ffi.NativeFunction<_c_make_payment_uri>>('make_payment_uri');
  late final _dart_make_payment_uri _make_payment_uri =
      _make_payment_uri_ptr.asFunction<_dart_make_payment_uri>();

  CResult_____c_char parse_payment_uri(
    ffi.Pointer<ffi.Int8> uri,
  ) {
    return _parse_payment_uri(
      uri,
    );
  }

  late final _parse_payment_uri_ptr =
      _lookup<ffi.NativeFunction<_c_parse_payment_uri>>('parse_payment_uri');
  late final _dart_parse_payment_uri _parse_payment_uri =
      _parse_payment_uri_ptr.asFunction<_dart_parse_payment_uri>();

  CResult______u8 generate_key() {
    return _generate_key();
  }

  late final _generate_key_ptr =
      _lookup<ffi.NativeFunction<_c_generate_key>>('generate_key');
  late final _dart_generate_key _generate_key =
      _generate_key_ptr.asFunction<_dart_generate_key>();

  CResult_u8 zip_backup(
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Int8> dst_dir,
  ) {
    return _zip_backup(
      key,
      dst_dir,
    );
  }

  late final _zip_backup_ptr =
      _lookup<ffi.NativeFunction<_c_zip_backup>>('zip_backup');
  late final _dart_zip_backup _zip_backup =
      _zip_backup_ptr.asFunction<_dart_zip_backup>();

  CResult_u8 unzip_backup(
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Int8> data_path,
    ffi.Pointer<ffi.Int8> dst_dir,
  ) {
    return _unzip_backup(
      key,
      data_path,
      dst_dir,
    );
  }

  late final _unzip_backup_ptr =
      _lookup<ffi.NativeFunction<_c_unzip_backup>>('unzip_backup');
  late final _dart_unzip_backup _unzip_backup =
      _unzip_backup_ptr.asFunction<_dart_unzip_backup>();

  CResult______u8 split_data(
    int id,
    ffi.Pointer<ffi.Int8> data,
  ) {
    return _split_data(
      id,
      data,
    );
  }

  late final _split_data_ptr =
      _lookup<ffi.NativeFunction<_c_split_data>>('split_data');
  late final _dart_split_data _split_data =
      _split_data_ptr.asFunction<_dart_split_data>();

  CResult_____c_char merge_data(
    ffi.Pointer<ffi.Int8> drop,
  ) {
    return _merge_data(
      drop,
    );
  }

  late final _merge_data_ptr =
      _lookup<ffi.NativeFunction<_c_merge_data>>('merge_data');
  late final _dart_merge_data _merge_data =
      _merge_data_ptr.asFunction<_dart_merge_data>();

  CResult_____c_char get_tx_summary(
    ffi.Pointer<ffi.Int8> tx,
  ) {
    return _get_tx_summary(
      tx,
    );
  }

  late final _get_tx_summary_ptr =
      _lookup<ffi.NativeFunction<_c_get_tx_summary>>('get_tx_summary');
  late final _dart_get_tx_summary _get_tx_summary =
      _get_tx_summary_ptr.asFunction<_dart_get_tx_summary>();

  CResult_____c_char get_best_server(
    ffi.Pointer<ffi.Uint8> servers,
    int len,
  ) {
    return _get_best_server(
      servers,
      len,
    );
  }

  late final _get_best_server_ptr =
      _lookup<ffi.NativeFunction<_c_get_best_server>>('get_best_server');
  late final _dart_get_best_server _get_best_server =
      _get_best_server_ptr.asFunction<_dart_get_best_server>();

  void import_from_zwl(
    int coin,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> data,
  ) {
    return _import_from_zwl(
      coin,
      name,
      data,
    );
  }

  late final _import_from_zwl_ptr =
      _lookup<ffi.NativeFunction<_c_import_from_zwl>>('import_from_zwl');
  late final _dart_import_from_zwl _import_from_zwl =
      _import_from_zwl_ptr.asFunction<_dart_import_from_zwl>();

  CResult______u8 derive_zip32(
    int coin,
    int id_account,
    int account,
    int external_1,
    int has_address,
    int address,
  ) {
    return _derive_zip32(
      coin,
      id_account,
      account,
      external_1,
      has_address,
      address,
    );
  }

  late final _derive_zip32_ptr =
      _lookup<ffi.NativeFunction<_c_derive_zip32>>('derive_zip32');
  late final _dart_derive_zip32 _derive_zip32 =
      _derive_zip32_ptr.asFunction<_dart_derive_zip32>();

  CResult_u8 clear_tx_details(
    int coin,
    int account,
  ) {
    return _clear_tx_details(
      coin,
      account,
    );
  }

  late final _clear_tx_details_ptr =
      _lookup<ffi.NativeFunction<_c_clear_tx_details>>('clear_tx_details');
  late final _dart_clear_tx_details _clear_tx_details =
      _clear_tx_details_ptr.asFunction<_dart_clear_tx_details>();

  CResult______u8 get_account_list(
    int coin,
  ) {
    return _get_account_list(
      coin,
    );
  }

  late final _get_account_list_ptr =
      _lookup<ffi.NativeFunction<_c_get_account_list>>('get_account_list');
  late final _dart_get_account_list _get_account_list =
      _get_account_list_ptr.asFunction<_dart_get_account_list>();

  CResult_u32 get_active_account(
    int coin,
  ) {
    return _get_active_account(
      coin,
    );
  }

  late final _get_active_account_ptr =
      _lookup<ffi.NativeFunction<_c_get_active_account>>('get_active_account');
  late final _dart_get_active_account _get_active_account =
      _get_active_account_ptr.asFunction<_dart_get_active_account>();

  CResult_u8 set_active_account(
    int coin,
    int id,
  ) {
    return _set_active_account(
      coin,
      id,
    );
  }

  late final _set_active_account_ptr =
      _lookup<ffi.NativeFunction<_c_set_active_account>>('set_active_account');
  late final _dart_set_active_account _set_active_account =
      _set_active_account_ptr.asFunction<_dart_set_active_account>();

  CResult_____c_char get_t_addr(
    int coin,
    int id,
  ) {
    return _get_t_addr(
      coin,
      id,
    );
  }

  late final _get_t_addr_ptr =
      _lookup<ffi.NativeFunction<_c_get_t_addr>>('get_t_addr');
  late final _dart_get_t_addr _get_t_addr =
      _get_t_addr_ptr.asFunction<_dart_get_t_addr>();

  CResult_____c_char get_sk(
    int coin,
    int id,
  ) {
    return _get_sk(
      coin,
      id,
    );
  }

  late final _get_sk_ptr = _lookup<ffi.NativeFunction<_c_get_sk>>('get_sk');
  late final _dart_get_sk _get_sk = _get_sk_ptr.asFunction<_dart_get_sk>();

  CResult_u8 update_account_name(
    int coin,
    int id,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _update_account_name(
      coin,
      id,
      name,
    );
  }

  late final _update_account_name_ptr =
      _lookup<ffi.NativeFunction<_c_update_account_name>>(
          'update_account_name');
  late final _dart_update_account_name _update_account_name =
      _update_account_name_ptr.asFunction<_dart_update_account_name>();

  CResult______u8 get_balances(
    int coin,
    int id,
    int confirmed_height,
  ) {
    return _get_balances(
      coin,
      id,
      confirmed_height,
    );
  }

  late final _get_balances_ptr =
      _lookup<ffi.NativeFunction<_c_get_balances>>('get_balances');
  late final _dart_get_balances _get_balances =
      _get_balances_ptr.asFunction<_dart_get_balances>();

  CResult______u8 get_db_height(
    int coin,
  ) {
    return _get_db_height(
      coin,
    );
  }

  late final _get_db_height_ptr =
      _lookup<ffi.NativeFunction<_c_get_db_height>>('get_db_height');
  late final _dart_get_db_height _get_db_height =
      _get_db_height_ptr.asFunction<_dart_get_db_height>();

  CResult______u8 get_notes(
    int coin,
    int id,
  ) {
    return _get_notes(
      coin,
      id,
    );
  }

  late final _get_notes_ptr =
      _lookup<ffi.NativeFunction<_c_get_notes>>('get_notes');
  late final _dart_get_notes _get_notes =
      _get_notes_ptr.asFunction<_dart_get_notes>();

  CResult______u8 get_txs(
    int coin,
    int id,
  ) {
    return _get_txs(
      coin,
      id,
    );
  }

  late final _get_txs_ptr = _lookup<ffi.NativeFunction<_c_get_txs>>('get_txs');
  late final _dart_get_txs _get_txs = _get_txs_ptr.asFunction<_dart_get_txs>();

  CResult______u8 get_messages(
    int coin,
    int id,
  ) {
    return _get_messages(
      coin,
      id,
    );
  }

  late final _get_messages_ptr =
      _lookup<ffi.NativeFunction<_c_get_messages>>('get_messages');
  late final _dart_get_messages _get_messages =
      _get_messages_ptr.asFunction<_dart_get_messages>();

  CResult______u8 get_prev_next_message(
    int coin,
    int id,
    ffi.Pointer<ffi.Int8> subject,
    int height,
  ) {
    return _get_prev_next_message(
      coin,
      id,
      subject,
      height,
    );
  }

  late final _get_prev_next_message_ptr =
      _lookup<ffi.NativeFunction<_c_get_prev_next_message>>(
          'get_prev_next_message');
  late final _dart_get_prev_next_message _get_prev_next_message =
      _get_prev_next_message_ptr.asFunction<_dart_get_prev_next_message>();

  CResult______u8 get_templates(
    int coin,
  ) {
    return _get_templates(
      coin,
    );
  }

  late final _get_templates_ptr =
      _lookup<ffi.NativeFunction<_c_get_templates>>('get_templates');
  late final _dart_get_templates _get_templates =
      _get_templates_ptr.asFunction<_dart_get_templates>();

  CResult_u32 save_send_template(
    int coin,
    ffi.Pointer<ffi.Uint8> template_,
    int len,
  ) {
    return _save_send_template(
      coin,
      template_,
      len,
    );
  }

  late final _save_send_template_ptr =
      _lookup<ffi.NativeFunction<_c_save_send_template>>('save_send_template');
  late final _dart_save_send_template _save_send_template =
      _save_send_template_ptr.asFunction<_dart_save_send_template>();

  CResult_u8 delete_send_template(
    int coin,
    int id,
  ) {
    return _delete_send_template(
      coin,
      id,
    );
  }

  late final _delete_send_template_ptr =
      _lookup<ffi.NativeFunction<_c_delete_send_template>>(
          'delete_send_template');
  late final _dart_delete_send_template _delete_send_template =
      _delete_send_template_ptr.asFunction<_dart_delete_send_template>();

  CResult______u8 get_contacts(
    int coin,
  ) {
    return _get_contacts(
      coin,
    );
  }

  late final _get_contacts_ptr =
      _lookup<ffi.NativeFunction<_c_get_contacts>>('get_contacts');
  late final _dart_get_contacts _get_contacts =
      _get_contacts_ptr.asFunction<_dart_get_contacts>();

  CResult______u8 get_pnl_txs(
    int coin,
    int id,
    int timestamp,
  ) {
    return _get_pnl_txs(
      coin,
      id,
      timestamp,
    );
  }

  late final _get_pnl_txs_ptr =
      _lookup<ffi.NativeFunction<_c_get_pnl_txs>>('get_pnl_txs');
  late final _dart_get_pnl_txs _get_pnl_txs =
      _get_pnl_txs_ptr.asFunction<_dart_get_pnl_txs>();

  CResult______u8 get_historical_prices(
    int coin,
    int timestamp,
    ffi.Pointer<ffi.Int8> currency,
  ) {
    return _get_historical_prices(
      coin,
      timestamp,
      currency,
    );
  }

  late final _get_historical_prices_ptr =
      _lookup<ffi.NativeFunction<_c_get_historical_prices>>(
          'get_historical_prices');
  late final _dart_get_historical_prices _get_historical_prices =
      _get_historical_prices_ptr.asFunction<_dart_get_historical_prices>();

  CResult______u8 get_spendings(
    int coin,
    int id,
    int timestamp,
  ) {
    return _get_spendings(
      coin,
      id,
      timestamp,
    );
  }

  late final _get_spendings_ptr =
      _lookup<ffi.NativeFunction<_c_get_spendings>>('get_spendings');
  late final _dart_get_spendings _get_spendings =
      _get_spendings_ptr.asFunction<_dart_get_spendings>();

  CResult_u8 update_excluded(
    int coin,
    int id,
    int excluded,
  ) {
    return _update_excluded(
      coin,
      id,
      excluded,
    );
  }

  late final _update_excluded_ptr =
      _lookup<ffi.NativeFunction<_c_update_excluded>>('update_excluded');
  late final _dart_update_excluded _update_excluded =
      _update_excluded_ptr.asFunction<_dart_update_excluded>();

  CResult_u8 invert_excluded(
    int coin,
    int id,
  ) {
    return _invert_excluded(
      coin,
      id,
    );
  }

  late final _invert_excluded_ptr =
      _lookup<ffi.NativeFunction<_c_invert_excluded>>('invert_excluded');
  late final _dart_invert_excluded _invert_excluded =
      _invert_excluded_ptr.asFunction<_dart_invert_excluded>();

  CResult______u8 get_checkpoints(
    int coin,
  ) {
    return _get_checkpoints(
      coin,
    );
  }

  late final _get_checkpoints_ptr =
      _lookup<ffi.NativeFunction<_c_get_checkpoints>>('get_checkpoints');
  late final _dart_get_checkpoints _get_checkpoints =
      _get_checkpoints_ptr.asFunction<_dart_get_checkpoints>();

  CResult_bool decrypt_db(
    ffi.Pointer<ffi.Int8> db_path,
    ffi.Pointer<ffi.Int8> passwd,
  ) {
    return _decrypt_db(
      db_path,
      passwd,
    );
  }

  late final _decrypt_db_ptr =
      _lookup<ffi.NativeFunction<_c_decrypt_db>>('decrypt_db');
  late final _dart_decrypt_db _decrypt_db =
      _decrypt_db_ptr.asFunction<_dart_decrypt_db>();

  CResult_u8 clone_db_with_passwd(
    int coin,
    ffi.Pointer<ffi.Int8> temp_path,
    ffi.Pointer<ffi.Int8> passwd,
  ) {
    return _clone_db_with_passwd(
      coin,
      temp_path,
      passwd,
    );
  }

  late final _clone_db_with_passwd_ptr =
      _lookup<ffi.NativeFunction<_c_clone_db_with_passwd>>(
          'clone_db_with_passwd');
  late final _dart_clone_db_with_passwd _clone_db_with_passwd =
      _clone_db_with_passwd_ptr.asFunction<_dart_clone_db_with_passwd>();

  CResult_____c_char get_property(
    int coin,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _get_property(
      coin,
      name,
    );
  }

  late final _get_property_ptr =
      _lookup<ffi.NativeFunction<_c_get_property>>('get_property');
  late final _dart_get_property _get_property =
      _get_property_ptr.asFunction<_dart_get_property>();

  CResult_u8 set_property(
    int coin,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> value,
  ) {
    return _set_property(
      coin,
      name,
      value,
    );
  }

  late final _set_property_ptr =
      _lookup<ffi.NativeFunction<_c_set_property>>('set_property');
  late final _dart_set_property _set_property =
      _set_property_ptr.asFunction<_dart_set_property>();

  CResult_u8 import_uvk(
    int coin,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> yfvk,
  ) {
    return _import_uvk(
      coin,
      name,
      yfvk,
    );
  }

  late final _import_uvk_ptr =
      _lookup<ffi.NativeFunction<_c_import_uvk>>('import_uvk');
  late final _dart_import_uvk _import_uvk =
      _import_uvk_ptr.asFunction<_dart_import_uvk>();

  CResult_____c_char ledger_send(
    int coin,
    ffi.Pointer<ffi.Int8> tx_plan,
  ) {
    return _ledger_send(
      coin,
      tx_plan,
    );
  }

  late final _ledger_send_ptr =
      _lookup<ffi.NativeFunction<_c_ledger_send>>('ledger_send');
  late final _dart_ledger_send _ledger_send =
      _ledger_send_ptr.asFunction<_dart_ledger_send>();

  CResult_u32 ledger_import_account(
    int coin,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _ledger_import_account(
      coin,
      name,
    );
  }

  late final _ledger_import_account_ptr =
      _lookup<ffi.NativeFunction<_c_ledger_import_account>>(
          'ledger_import_account');
  late final _dart_ledger_import_account _ledger_import_account =
      _ledger_import_account_ptr.asFunction<_dart_ledger_import_account>();

  CResult_bool ledger_has_account(
    int coin,
    int account,
  ) {
    return _ledger_has_account(
      coin,
      account,
    );
  }

  late final _ledger_has_account_ptr =
      _lookup<ffi.NativeFunction<_c_ledger_has_account>>('ledger_has_account');
  late final _dart_ledger_has_account _ledger_has_account =
      _ledger_has_account_ptr.asFunction<_dart_ledger_has_account>();

  int has_cuda() {
    return _has_cuda();
  }

  late final _has_cuda_ptr =
      _lookup<ffi.NativeFunction<_c_has_cuda>>('has_cuda');
  late final _dart_has_cuda _has_cuda =
      _has_cuda_ptr.asFunction<_dart_has_cuda>();

  int has_metal() {
    return _has_metal();
  }

  late final _has_metal_ptr =
      _lookup<ffi.NativeFunction<_c_has_metal>>('has_metal');
  late final _dart_has_metal _has_metal =
      _has_metal_ptr.asFunction<_dart_has_metal>();

  int has_gpu() {
    return _has_gpu();
  }

  late final _has_gpu_ptr = _lookup<ffi.NativeFunction<_c_has_gpu>>('has_gpu');
  late final _dart_has_gpu _has_gpu = _has_gpu_ptr.asFunction<_dart_has_gpu>();

  void use_gpu(
    int v,
  ) {
    return _use_gpu(
      v,
    );
  }

  late final _use_gpu_ptr = _lookup<ffi.NativeFunction<_c_use_gpu>>('use_gpu');
  late final _dart_use_gpu _use_gpu = _use_gpu_ptr.asFunction<_dart_use_gpu>();
}

class CResult_u8 extends ffi.Struct {
  @ffi.Uint8()
  external int value;

  external ffi.Pointer<ffi.Int8> error;

  @ffi.Uint32()
  external int len;
}

class CResult_u32 extends ffi.Struct {
  @ffi.Uint32()
  external int value;

  external ffi.Pointer<ffi.Int8> error;

  @ffi.Uint32()
  external int len;
}

class CResult______u8 extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> value;

  external ffi.Pointer<ffi.Int8> error;

  @ffi.Uint32()
  external int len;
}

class CResult_____c_char extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> value;

  external ffi.Pointer<ffi.Int8> error;

  @ffi.Uint32()
  external int len;
}

class CResult_u64 extends ffi.Struct {
  @ffi.Uint64()
  external int value;

  external ffi.Pointer<ffi.Int8> error;

  @ffi.Uint32()
  external int len;
}

class CResult_bool extends ffi.Struct {
  @ffi.Int8()
  external int value;

  external ffi.Pointer<ffi.Int8> error;

  @ffi.Uint32()
  external int len;
}

const int EXPIRY_HEIGHT_OFFSET = 50;

const int QR_DATA_SIZE = 256;

const int MAX_ATTEMPTS = 10;

const int N = 200000;

const int Account_VT_ID = 4;

const int Account_VT_NAME = 6;

const int Account_VT_KEY_TYPE = 8;

const int Account_VT_BALANCE = 10;

const int AccountVec_VT_ACCOUNTS = 4;

const int Balance_VT_SHIELDED = 4;

const int Balance_VT_UNCONFIRMED_SPENT = 6;

const int Balance_VT_UNDER_CONFIRMED = 10;

const int Balance_VT_EXCLUDED = 12;

const int Balance_VT_SAPLING = 14;

const int Balance_VT_ORCHARD = 16;

const int Height_VT_HEIGHT = 4;

const int Height_VT_TIMESTAMP = 6;

const int ShieldedNote_VT_VALUE = 8;

const int ShieldedNote_VT_SPENT = 16;

const int ShieldedNoteVec_VT_NOTES = 4;

const int ShieldedTx_VT_TX_ID = 6;

const int ShieldedTx_VT_SHORT_TX_ID = 10;

const int ShieldedTx_VT_ADDRESS = 18;

const int ShieldedTx_VT_MEMO = 20;

const int ShieldedTxVec_VT_TXS = 4;

const int Message_VT_ID_MSG = 4;

const int Message_VT_ID_TX = 6;

const int Message_VT_FROM = 12;

const int Message_VT_TO = 14;

const int Message_VT_SUBJECT = 16;

const int Message_VT_BODY = 18;

const int Message_VT_READ = 20;

const int Message_VT_INCOMING = 22;

const int MessageVec_VT_MESSAGES = 4;

const int PrevNext_VT_PREV = 4;

const int PrevNext_VT_NEXT = 6;

const int SendTemplate_VT_TITLE = 6;

const int SendTemplate_VT_AMOUNT = 10;

const int SendTemplate_VT_FIAT_AMOUNT = 12;

const int SendTemplate_VT_FEE_INCLUDED = 14;

const int SendTemplate_VT_FIAT = 16;

const int SendTemplate_VT_INCLUDE_REPLY_TO = 18;

const int SendTemplateVec_VT_TEMPLATES = 4;

const int ContactVec_VT_CONTACTS = 4;

const int TxTimeValueVec_VT_VALUES = 4;

const int Quote_VT_PRICE = 6;

const int Spending_VT_RECIPIENT = 4;

const int AddressBalance_VT_INDEX = 4;

const int Backup_VT_SEED = 6;

const int Backup_VT_SK = 10;

const int Backup_VT_FVK = 12;

const int Backup_VT_UVK = 14;

const int RaptorQDrops_VT_DROPS = 4;

const int AGEKeys_VT_PK = 6;

const int Servers_VT_URLS = 4;

const int Progress_VT_TRIAL_DECRYPTIONS = 6;

const int Progress_VT_DOWNLOADED = 8;

const int KeyPack_VT_T_ADDR = 4;

const int KeyPack_VT_T_KEY = 6;

const int KeyPack_VT_Z_ADDR = 8;

const int KeyPack_VT_Z_KEY = 10;

const int Recipient_VT_REPLY_TO = 10;

const int Recipient_VT_MAX_AMOUNT_PER_NOTE = 16;

const int UnsignedTxSummary_VT_RECIPIENTS = 4;

const int TxOutput_VT_POOL = 10;

const int TxReport_VT_OUTPUTS = 4;

const int TxReport_VT_TRANSPARENT = 6;

const int TxReport_VT_NET_SAPLING = 12;

const int TxReport_VT_NET_ORCHARD = 14;

const int TxReport_VT_FEE = 16;

const int TxReport_VT_PRIVACY_LEVEL = 18;

typedef _c_dummy_export = ffi.Void Function();

typedef _dart_dummy_export = void Function();

typedef _c_dart_post_cobject = ffi.Void Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _dart_dart_post_cobject = void Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _c_deallocate_str = ffi.Void Function(
  ffi.Pointer<ffi.Int8> s,
);

typedef _dart_deallocate_str = void Function(
  ffi.Pointer<ffi.Int8> s,
);

typedef _c_deallocate_bytes = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> ptr,
  ffi.Uint32 len,
);

typedef _dart_deallocate_bytes = void Function(
  ffi.Pointer<ffi.Uint8> ptr,
  int len,
);

typedef _c_init_wallet = CResult_u8 Function(
  ffi.Uint8 coin,
  ffi.Pointer<ffi.Int8> db_path,
);

typedef _dart_init_wallet = CResult_u8 Function(
  int coin,
  ffi.Pointer<ffi.Int8> db_path,
);

typedef _c_migrate_db = CResult_u8 Function(
  ffi.Uint8 coin,
  ffi.Pointer<ffi.Int8> db_path,
);

typedef _dart_migrate_db = CResult_u8 Function(
  int coin,
  ffi.Pointer<ffi.Int8> db_path,
);

typedef _c_migrate_data_db = CResult_u8 Function(
  ffi.Uint8 coin,
);

typedef _dart_migrate_data_db = CResult_u8 Function(
  int coin,
);

typedef _c_set_active = ffi.Void Function(
  ffi.Uint8 active,
);

typedef _dart_set_active = void Function(
  int active,
);

typedef _c_set_coin_lwd_url = ffi.Void Function(
  ffi.Uint8 coin,
  ffi.Pointer<ffi.Int8> lwd_url,
);

typedef _dart_set_coin_lwd_url = void Function(
  int coin,
  ffi.Pointer<ffi.Int8> lwd_url,
);

typedef _c_get_lwd_url = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint8 coin,
);

typedef _dart_get_lwd_url = ffi.Pointer<ffi.Int8> Function(
  int coin,
);

typedef _c_set_coin_passwd = ffi.Void Function(
  ffi.Uint8 coin,
  ffi.Pointer<ffi.Int8> passwd,
);

typedef _dart_set_coin_passwd = void Function(
  int coin,
  ffi.Pointer<ffi.Int8> passwd,
);

typedef _c_reset_app = ffi.Void Function();

typedef _dart_reset_app = void Function();

typedef _c_mempool_run = ffi.Void Function(
  ffi.Int64 port,
);

typedef _dart_mempool_run = void Function(
  int port,
);

typedef _c_mempool_set_active = ffi.Void Function(
  ffi.Uint8 coin,
  ffi.Uint32 id_account,
);

typedef _dart_mempool_set_active = void Function(
  int coin,
  int id_account,
);

typedef _c_new_account = CResult_u32 Function(
  ffi.Uint8 coin,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> data,
  ffi.Int32 index,
);

typedef _dart_new_account = CResult_u32 Function(
  int coin,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> data,
  int index,
);

typedef _c_new_sub_account = ffi.Void Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 index,
  ffi.Uint32 count,
);

typedef _dart_new_sub_account = void Function(
  ffi.Pointer<ffi.Int8> name,
  int index,
  int count,
);

typedef _c_convert_to_watchonly = CResult_u8 Function(
  ffi.Uint8 coin,
  ffi.Uint32 id_account,
);

typedef _dart_convert_to_watchonly = CResult_u8 Function(
  int coin,
  int id_account,
);

typedef _c_get_backup = CResult______u8 Function(
  ffi.Uint8 coin,
  ffi.Uint32 id_account,
);

typedef _dart_get_backup = CResult______u8 Function(
  int coin,
  int id_account,
);

typedef _c_get_available_addrs = CResult_u8 Function(
  ffi.Uint8 coin,
  ffi.Uint32 account,
);

typedef _dart_get_available_addrs = CResult_u8 Function(
  int coin,
  int account,
);

typedef _c_get_address = CResult_____c_char Function(
  ffi.Uint8 coin,
  ffi.Uint32 id_account,
  ffi.Uint8 ua_type,
);

typedef _dart_get_address = CResult_____c_char Function(
  int coin,
  int id_account,
  int ua_type,
);

typedef _c_import_transparent_key = ffi.Void Function(
  ffi.Uint8 coin,
  ffi.Uint32 id_account,
  ffi.Pointer<ffi.Int8> path,
);

typedef _dart_import_transparent_key = void Function(
  int coin,
  int id_account,
  ffi.Pointer<ffi.Int8> path,
);

typedef _c_import_transparent_secret_key = ffi.Void Function(
  ffi.Uint8 coin,
  ffi.Uint32 id_account,
  ffi.Pointer<ffi.Int8> secret_key,
);

typedef _dart_import_transparent_secret_key = void Function(
  int coin,
  int id_account,
  ffi.Pointer<ffi.Int8> secret_key,
);

typedef _c_cancel_warp = ffi.Void Function();

typedef _dart_cancel_warp = void Function();

typedef _c_warp = CResult_u8 Function(
  ffi.Uint8 coin,
  ffi.Int8 get_tx,
  ffi.Uint32 anchor_offset,
  ffi.Uint32 max_cost,
  ffi.Int64 port,
);

typedef _dart_warp = CResult_u8 Function(
  int coin,
  int get_tx,
  int anchor_offset,
  int max_cost,
  int port,
);

typedef _c_is_valid_key = ffi.Int8 Function(
  ffi.Uint8 coin,
  ffi.Pointer<ffi.Int8> key,
);

typedef _dart_is_valid_key = int Function(
  int coin,
  ffi.Pointer<ffi.Int8> key,
);

typedef _c_valid_address = ffi.Int8 Function(
  ffi.Uint8 coin,
  ffi.Pointer<ffi.Int8> address,
);

typedef _dart_valid_address = int Function(
  int coin,
  ffi.Pointer<ffi.Int8> address,
);

typedef _c_get_diversified_address = CResult_____c_char Function(
  ffi.Uint8 ua_type,
  ffi.Uint32 time,
);

typedef _dart_get_diversified_address = CResult_____c_char Function(
  int ua_type,
  int time,
);

typedef _c_get_latest_height = CResult_u32 Function();

typedef _dart_get_latest_height = CResult_u32 Function();

typedef _c_ledger_build_keys = CResult_u8 Function();

typedef _dart_ledger_build_keys = CResult_u8 Function();

typedef _c_ledger_get_fvk = CResult_____c_char Function(
  ffi.Uint8 coin,
);

typedef _dart_ledger_get_fvk = CResult_____c_char Function(
  int coin,
);

typedef _c_ledger_get_address = CResult_____c_char Function();

typedef _dart_ledger_get_address = CResult_____c_char Function();

typedef _c_skip_to_last_height = ffi.Void Function(
  ffi.Uint8 coin,
);

typedef _dart_skip_to_last_height = void Function(
  int coin,
);

typedef _c_rewind_to = CResult_u32 Function(
  ffi.Uint32 height,
);

typedef _dart_rewind_to = CResult_u32 Function(
  int height,
);

typedef _c_rescan_from = ffi.Void Function(
  ffi.Uint32 height,
);

typedef _dart_rescan_from = void Function(
  int height,
);

typedef _c_get_taddr_balance = CResult_u64 Function(
  ffi.Uint8 coin,
  ffi.Uint32 id_account,
);

typedef _dart_get_taddr_balance = CResult_u64 Function(
  int coin,
  int id_account,
);

typedef _c_transfer_pools = CResult_____c_char Function(
  ffi.Uint8 coin,
  ffi.Uint32 account,
  ffi.Uint8 from_pool,
  ffi.Uint8 to_pool,
  ffi.Uint64 amount,
  ffi.Int8 fee_included,
  ffi.Pointer<ffi.Int8> memo,
  ffi.Uint64 split_amount,
  ffi.Uint32 confirmations,
);

typedef _dart_transfer_pools = CResult_____c_char Function(
  int coin,
  int account,
  int from_pool,
  int to_pool,
  int amount,
  int fee_included,
  ffi.Pointer<ffi.Int8> memo,
  int split_amount,
  int confirmations,
);

typedef _c_shield_taddr = CResult_____c_char Function(
  ffi.Uint8 coin,
  ffi.Uint32 account,
  ffi.Uint64 amount,
  ffi.Uint32 confirmations,
);

typedef _dart_shield_taddr = CResult_____c_char Function(
  int coin,
  int account,
  int amount,
  int confirmations,
);

typedef _c_scan_transparent_accounts = CResult______u8 Function(
  ffi.Uint8 coin,
  ffi.Uint32 account,
  ffi.Uint32 gap_limit,
);

typedef _dart_scan_transparent_accounts = CResult______u8 Function(
  int coin,
  int account,
  int gap_limit,
);

typedef _c_prepare_multi_payment = CResult_____c_char Function(
  ffi.Uint8 coin,
  ffi.Uint32 account,
  ffi.Pointer<ffi.Uint8> recipients_bytes,
  ffi.Uint64 recipients_len,
  ffi.Uint32 anchor_offset,
);

typedef _dart_prepare_multi_payment = CResult_____c_char Function(
  int coin,
  int account,
  ffi.Pointer<ffi.Uint8> recipients_bytes,
  int recipients_len,
  int anchor_offset,
);

typedef _c_transaction_report = CResult______u8 Function(
  ffi.Uint8 coin,
  ffi.Pointer<ffi.Int8> plan,
);

typedef _dart_transaction_report = CResult______u8 Function(
  int coin,
  ffi.Pointer<ffi.Int8> plan,
);

typedef _c_sign = CResult_____c_char Function(
  ffi.Uint8 coin,
  ffi.Uint32 account,
  ffi.Pointer<ffi.Int8> tx_plan,
  ffi.Int64 _port,
);

typedef _dart_sign = CResult_____c_char Function(
  int coin,
  int account,
  ffi.Pointer<ffi.Int8> tx_plan,
  int _port,
);

typedef _c_sign_and_broadcast = CResult_____c_char Function(
  ffi.Uint8 coin,
  ffi.Uint32 account,
  ffi.Pointer<ffi.Int8> tx_plan,
);

typedef _dart_sign_and_broadcast = CResult_____c_char Function(
  int coin,
  int account,
  ffi.Pointer<ffi.Int8> tx_plan,
);

typedef _c_broadcast_tx = CResult_____c_char Function(
  ffi.Pointer<ffi.Int8> tx_str,
);

typedef _dart_broadcast_tx = CResult_____c_char Function(
  ffi.Pointer<ffi.Int8> tx_str,
);

typedef _c_is_valid_tkey = ffi.Int8 Function(
  ffi.Pointer<ffi.Int8> sk,
);

typedef _dart_is_valid_tkey = int Function(
  ffi.Pointer<ffi.Int8> sk,
);

typedef _c_sweep_tkey = CResult_____c_char Function(
  ffi.Uint32 last_height,
  ffi.Pointer<ffi.Int8> sk,
  ffi.Uint8 pool,
  ffi.Uint32 confirmations,
);

typedef _dart_sweep_tkey = CResult_____c_char Function(
  int last_height,
  ffi.Pointer<ffi.Int8> sk,
  int pool,
  int confirmations,
);

typedef _c_get_activation_date = CResult_u32 Function();

typedef _dart_get_activation_date = CResult_u32 Function();

typedef _c_get_block_by_time = CResult_u32 Function(
  ffi.Uint32 time,
);

typedef _dart_get_block_by_time = CResult_u32 Function(
  int time,
);

typedef _c_sync_historical_prices = CResult_u32 Function(
  ffi.Int64 now,
  ffi.Uint32 days,
  ffi.Pointer<ffi.Int8> currency,
);

typedef _dart_sync_historical_prices = CResult_u32 Function(
  int now,
  int days,
  ffi.Pointer<ffi.Int8> currency,
);

typedef _c_store_contact = ffi.Void Function(
  ffi.Uint32 id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> address,
  ffi.Int8 dirty,
);

typedef _dart_store_contact = void Function(
  int id,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> address,
  int dirty,
);

typedef _c_commit_unsaved_contacts = CResult_____c_char Function(
  ffi.Uint32 anchor_offset,
);

typedef _dart_commit_unsaved_contacts = CResult_____c_char Function(
  int anchor_offset,
);

typedef _c_mark_message_read = ffi.Void Function(
  ffi.Uint32 message,
  ffi.Int8 read,
);

typedef _dart_mark_message_read = void Function(
  int message,
  int read,
);

typedef _c_mark_all_messages_read = ffi.Void Function(
  ffi.Int8 read,
);

typedef _dart_mark_all_messages_read = void Function(
  int read,
);

typedef _c_truncate_data = ffi.Void Function();

typedef _dart_truncate_data = void Function();

typedef _c_truncate_sync_data = ffi.Void Function();

typedef _dart_truncate_sync_data = void Function();

typedef _c_check_account = ffi.Int8 Function(
  ffi.Uint8 coin,
  ffi.Uint32 account,
);

typedef _dart_check_account = int Function(
  int coin,
  int account,
);

typedef _c_delete_account = ffi.Void Function(
  ffi.Uint8 coin,
  ffi.Uint32 account,
);

typedef _dart_delete_account = void Function(
  int coin,
  int account,
);

typedef _c_make_payment_uri = CResult_____c_char Function(
  ffi.Uint8 coin,
  ffi.Pointer<ffi.Int8> address,
  ffi.Uint64 amount,
  ffi.Pointer<ffi.Int8> memo,
);

typedef _dart_make_payment_uri = CResult_____c_char Function(
  int coin,
  ffi.Pointer<ffi.Int8> address,
  int amount,
  ffi.Pointer<ffi.Int8> memo,
);

typedef _c_parse_payment_uri = CResult_____c_char Function(
  ffi.Pointer<ffi.Int8> uri,
);

typedef _dart_parse_payment_uri = CResult_____c_char Function(
  ffi.Pointer<ffi.Int8> uri,
);

typedef _c_generate_key = CResult______u8 Function();

typedef _dart_generate_key = CResult______u8 Function();

typedef _c_zip_backup = CResult_u8 Function(
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Int8> dst_dir,
);

typedef _dart_zip_backup = CResult_u8 Function(
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Int8> dst_dir,
);

typedef _c_unzip_backup = CResult_u8 Function(
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Int8> data_path,
  ffi.Pointer<ffi.Int8> dst_dir,
);

typedef _dart_unzip_backup = CResult_u8 Function(
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Int8> data_path,
  ffi.Pointer<ffi.Int8> dst_dir,
);

typedef _c_split_data = CResult______u8 Function(
  ffi.Uint32 id,
  ffi.Pointer<ffi.Int8> data,
);

typedef _dart_split_data = CResult______u8 Function(
  int id,
  ffi.Pointer<ffi.Int8> data,
);

typedef _c_merge_data = CResult_____c_char Function(
  ffi.Pointer<ffi.Int8> drop,
);

typedef _dart_merge_data = CResult_____c_char Function(
  ffi.Pointer<ffi.Int8> drop,
);

typedef _c_get_tx_summary = CResult_____c_char Function(
  ffi.Pointer<ffi.Int8> tx,
);

typedef _dart_get_tx_summary = CResult_____c_char Function(
  ffi.Pointer<ffi.Int8> tx,
);

typedef _c_get_best_server = CResult_____c_char Function(
  ffi.Pointer<ffi.Uint8> servers,
  ffi.Uint64 len,
);

typedef _dart_get_best_server = CResult_____c_char Function(
  ffi.Pointer<ffi.Uint8> servers,
  int len,
);

typedef _c_import_from_zwl = ffi.Void Function(
  ffi.Uint8 coin,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> data,
);

typedef _dart_import_from_zwl = void Function(
  int coin,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> data,
);

typedef _c_derive_zip32 = CResult______u8 Function(
  ffi.Uint8 coin,
  ffi.Uint32 id_account,
  ffi.Uint32 account,
  ffi.Uint32 external_1,
  ffi.Int8 has_address,
  ffi.Uint32 address,
);

typedef _dart_derive_zip32 = CResult______u8 Function(
  int coin,
  int id_account,
  int account,
  int external_1,
  int has_address,
  int address,
);

typedef _c_clear_tx_details = CResult_u8 Function(
  ffi.Uint8 coin,
  ffi.Uint32 account,
);

typedef _dart_clear_tx_details = CResult_u8 Function(
  int coin,
  int account,
);

typedef _c_get_account_list = CResult______u8 Function(
  ffi.Uint8 coin,
);

typedef _dart_get_account_list = CResult______u8 Function(
  int coin,
);

typedef _c_get_active_account = CResult_u32 Function(
  ffi.Uint8 coin,
);

typedef _dart_get_active_account = CResult_u32 Function(
  int coin,
);

typedef _c_set_active_account = CResult_u8 Function(
  ffi.Uint8 coin,
  ffi.Uint32 id,
);

typedef _dart_set_active_account = CResult_u8 Function(
  int coin,
  int id,
);

typedef _c_get_t_addr = CResult_____c_char Function(
  ffi.Uint8 coin,
  ffi.Uint32 id,
);

typedef _dart_get_t_addr = CResult_____c_char Function(
  int coin,
  int id,
);

typedef _c_get_sk = CResult_____c_char Function(
  ffi.Uint8 coin,
  ffi.Uint32 id,
);

typedef _dart_get_sk = CResult_____c_char Function(
  int coin,
  int id,
);

typedef _c_update_account_name = CResult_u8 Function(
  ffi.Uint8 coin,
  ffi.Uint32 id,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_update_account_name = CResult_u8 Function(
  int coin,
  int id,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_get_balances = CResult______u8 Function(
  ffi.Uint8 coin,
  ffi.Uint32 id,
  ffi.Uint32 confirmed_height,
);

typedef _dart_get_balances = CResult______u8 Function(
  int coin,
  int id,
  int confirmed_height,
);

typedef _c_get_db_height = CResult______u8 Function(
  ffi.Uint8 coin,
);

typedef _dart_get_db_height = CResult______u8 Function(
  int coin,
);

typedef _c_get_notes = CResult______u8 Function(
  ffi.Uint8 coin,
  ffi.Uint32 id,
);

typedef _dart_get_notes = CResult______u8 Function(
  int coin,
  int id,
);

typedef _c_get_txs = CResult______u8 Function(
  ffi.Uint8 coin,
  ffi.Uint32 id,
);

typedef _dart_get_txs = CResult______u8 Function(
  int coin,
  int id,
);

typedef _c_get_messages = CResult______u8 Function(
  ffi.Uint8 coin,
  ffi.Uint32 id,
);

typedef _dart_get_messages = CResult______u8 Function(
  int coin,
  int id,
);

typedef _c_get_prev_next_message = CResult______u8 Function(
  ffi.Uint8 coin,
  ffi.Uint32 id,
  ffi.Pointer<ffi.Int8> subject,
  ffi.Uint32 height,
);

typedef _dart_get_prev_next_message = CResult______u8 Function(
  int coin,
  int id,
  ffi.Pointer<ffi.Int8> subject,
  int height,
);

typedef _c_get_templates = CResult______u8 Function(
  ffi.Uint8 coin,
);

typedef _dart_get_templates = CResult______u8 Function(
  int coin,
);

typedef _c_save_send_template = CResult_u32 Function(
  ffi.Uint8 coin,
  ffi.Pointer<ffi.Uint8> template_,
  ffi.Uint64 len,
);

typedef _dart_save_send_template = CResult_u32 Function(
  int coin,
  ffi.Pointer<ffi.Uint8> template_,
  int len,
);

typedef _c_delete_send_template = CResult_u8 Function(
  ffi.Uint8 coin,
  ffi.Uint32 id,
);

typedef _dart_delete_send_template = CResult_u8 Function(
  int coin,
  int id,
);

typedef _c_get_contacts = CResult______u8 Function(
  ffi.Uint8 coin,
);

typedef _dart_get_contacts = CResult______u8 Function(
  int coin,
);

typedef _c_get_pnl_txs = CResult______u8 Function(
  ffi.Uint8 coin,
  ffi.Uint32 id,
  ffi.Uint32 timestamp,
);

typedef _dart_get_pnl_txs = CResult______u8 Function(
  int coin,
  int id,
  int timestamp,
);

typedef _c_get_historical_prices = CResult______u8 Function(
  ffi.Uint8 coin,
  ffi.Uint32 timestamp,
  ffi.Pointer<ffi.Int8> currency,
);

typedef _dart_get_historical_prices = CResult______u8 Function(
  int coin,
  int timestamp,
  ffi.Pointer<ffi.Int8> currency,
);

typedef _c_get_spendings = CResult______u8 Function(
  ffi.Uint8 coin,
  ffi.Uint32 id,
  ffi.Uint32 timestamp,
);

typedef _dart_get_spendings = CResult______u8 Function(
  int coin,
  int id,
  int timestamp,
);

typedef _c_update_excluded = CResult_u8 Function(
  ffi.Uint8 coin,
  ffi.Uint32 id,
  ffi.Int8 excluded,
);

typedef _dart_update_excluded = CResult_u8 Function(
  int coin,
  int id,
  int excluded,
);

typedef _c_invert_excluded = CResult_u8 Function(
  ffi.Uint8 coin,
  ffi.Uint32 id,
);

typedef _dart_invert_excluded = CResult_u8 Function(
  int coin,
  int id,
);

typedef _c_get_checkpoints = CResult______u8 Function(
  ffi.Uint8 coin,
);

typedef _dart_get_checkpoints = CResult______u8 Function(
  int coin,
);

typedef _c_decrypt_db = CResult_bool Function(
  ffi.Pointer<ffi.Int8> db_path,
  ffi.Pointer<ffi.Int8> passwd,
);

typedef _dart_decrypt_db = CResult_bool Function(
  ffi.Pointer<ffi.Int8> db_path,
  ffi.Pointer<ffi.Int8> passwd,
);

typedef _c_clone_db_with_passwd = CResult_u8 Function(
  ffi.Uint8 coin,
  ffi.Pointer<ffi.Int8> temp_path,
  ffi.Pointer<ffi.Int8> passwd,
);

typedef _dart_clone_db_with_passwd = CResult_u8 Function(
  int coin,
  ffi.Pointer<ffi.Int8> temp_path,
  ffi.Pointer<ffi.Int8> passwd,
);

typedef _c_get_property = CResult_____c_char Function(
  ffi.Uint8 coin,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_get_property = CResult_____c_char Function(
  int coin,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_set_property = CResult_u8 Function(
  ffi.Uint8 coin,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> value,
);

typedef _dart_set_property = CResult_u8 Function(
  int coin,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> value,
);

typedef _c_import_uvk = CResult_u8 Function(
  ffi.Uint8 coin,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> yfvk,
);

typedef _dart_import_uvk = CResult_u8 Function(
  int coin,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> yfvk,
);

typedef _c_ledger_send = CResult_____c_char Function(
  ffi.Uint8 coin,
  ffi.Pointer<ffi.Int8> tx_plan,
);

typedef _dart_ledger_send = CResult_____c_char Function(
  int coin,
  ffi.Pointer<ffi.Int8> tx_plan,
);

typedef _c_ledger_import_account = CResult_u32 Function(
  ffi.Uint8 coin,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_ledger_import_account = CResult_u32 Function(
  int coin,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_ledger_has_account = CResult_bool Function(
  ffi.Uint8 coin,
  ffi.Uint32 account,
);

typedef _dart_ledger_has_account = CResult_bool Function(
  int coin,
  int account,
);

typedef _c_has_cuda = ffi.Int8 Function();

typedef _dart_has_cuda = int Function();

typedef _c_has_metal = ffi.Int8 Function();

typedef _dart_has_metal = int Function();

typedef _c_has_gpu = ffi.Int8 Function();

typedef _dart_has_gpu = int Function();

typedef _c_use_gpu = ffi.Void Function(
  ffi.Int8 v,
);

typedef _dart_use_gpu = void Function(
  int v,
);
