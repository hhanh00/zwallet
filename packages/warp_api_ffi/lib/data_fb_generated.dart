// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library fb;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class Account {
  Account._(this._bc, this._bcOffset);
  factory Account(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Account> reader = _AccountReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get coin => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get id => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  int get keyType => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get balance => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 12, 0);
  String? get address => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  bool get saved => const fb.BoolReader().vTableGet(_bc, _bcOffset, 16, false);

  @override
  String toString() {
    return 'Account{coin: ${coin}, id: ${id}, name: ${name}, keyType: ${keyType}, balance: ${balance}, address: ${address}, saved: ${saved}}';
  }

  AccountT unpack() => AccountT(
      coin: coin,
      id: id,
      name: name,
      keyType: keyType,
      balance: balance,
      address: address,
      saved: saved);

  static int pack(fb.Builder fbBuilder, AccountT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class AccountT implements fb.Packable {
  int coin;
  int id;
  String? name;
  int keyType;
  int balance;
  String? address;
  bool saved;

  AccountT({
      this.coin = 0,
      this.id = 0,
      this.name,
      this.keyType = 0,
      this.balance = 0,
      this.address,
      this.saved = false});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? nameOffset = name == null ? null
        : fbBuilder.writeString(name!);
    final int? addressOffset = address == null ? null
        : fbBuilder.writeString(address!);
    fbBuilder.startTable(7);
    fbBuilder.addUint8(0, coin);
    fbBuilder.addUint32(1, id);
    fbBuilder.addOffset(2, nameOffset);
    fbBuilder.addUint8(3, keyType);
    fbBuilder.addUint64(4, balance);
    fbBuilder.addOffset(5, addressOffset);
    fbBuilder.addBool(6, saved);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'AccountT{coin: ${coin}, id: ${id}, name: ${name}, keyType: ${keyType}, balance: ${balance}, address: ${address}, saved: ${saved}}';
  }
}

class _AccountReader extends fb.TableReader<Account> {
  const _AccountReader();

  @override
  Account createObject(fb.BufferContext bc, int offset) => 
    Account._(bc, offset);
}

class AccountBuilder {
  AccountBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addCoin(int? coin) {
    fbBuilder.addUint8(0, coin);
    return fbBuilder.offset;
  }
  int addId(int? id) {
    fbBuilder.addUint32(1, id);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addKeyType(int? keyType) {
    fbBuilder.addUint8(3, keyType);
    return fbBuilder.offset;
  }
  int addBalance(int? balance) {
    fbBuilder.addUint64(4, balance);
    return fbBuilder.offset;
  }
  int addAddressOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addSaved(bool? saved) {
    fbBuilder.addBool(6, saved);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AccountObjectBuilder extends fb.ObjectBuilder {
  final int? _coin;
  final int? _id;
  final String? _name;
  final int? _keyType;
  final int? _balance;
  final String? _address;
  final bool? _saved;

  AccountObjectBuilder({
    int? coin,
    int? id,
    String? name,
    int? keyType,
    int? balance,
    String? address,
    bool? saved,
  })
      : _coin = coin,
        _id = id,
        _name = name,
        _keyType = keyType,
        _balance = balance,
        _address = address,
        _saved = saved;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? addressOffset = _address == null ? null
        : fbBuilder.writeString(_address!);
    fbBuilder.startTable(7);
    fbBuilder.addUint8(0, _coin);
    fbBuilder.addUint32(1, _id);
    fbBuilder.addOffset(2, nameOffset);
    fbBuilder.addUint8(3, _keyType);
    fbBuilder.addUint64(4, _balance);
    fbBuilder.addOffset(5, addressOffset);
    fbBuilder.addBool(6, _saved);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class AccountVec {
  AccountVec._(this._bc, this._bcOffset);
  factory AccountVec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AccountVec> reader = _AccountVecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Account>? get accounts => const fb.ListReader<Account>(Account.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'AccountVec{accounts: ${accounts}}';
  }

  AccountVecT unpack() => AccountVecT(
      accounts: accounts?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, AccountVecT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class AccountVecT implements fb.Packable {
  List<AccountT>? accounts;

  AccountVecT({
      this.accounts});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? accountsOffset = accounts == null ? null
        : fbBuilder.writeList(accounts!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, accountsOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'AccountVecT{accounts: ${accounts}}';
  }
}

class _AccountVecReader extends fb.TableReader<AccountVec> {
  const _AccountVecReader();

  @override
  AccountVec createObject(fb.BufferContext bc, int offset) => 
    AccountVec._(bc, offset);
}

class AccountVecBuilder {
  AccountVecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addAccountsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AccountVecObjectBuilder extends fb.ObjectBuilder {
  final List<AccountObjectBuilder>? _accounts;

  AccountVecObjectBuilder({
    List<AccountObjectBuilder>? accounts,
  })
      : _accounts = accounts;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? accountsOffset = _accounts == null ? null
        : fbBuilder.writeList(_accounts!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, accountsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Balance {
  Balance._(this._bc, this._bcOffset);
  factory Balance(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Balance> reader = _BalanceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get shielded => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get unconfirmedSpent => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get balance => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get underConfirmed => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get excluded => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 12, 0);
  int get sapling => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 14, 0);
  int get orchard => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 16, 0);

  @override
  String toString() {
    return 'Balance{shielded: ${shielded}, unconfirmedSpent: ${unconfirmedSpent}, balance: ${balance}, underConfirmed: ${underConfirmed}, excluded: ${excluded}, sapling: ${sapling}, orchard: ${orchard}}';
  }

  BalanceT unpack() => BalanceT(
      shielded: shielded,
      unconfirmedSpent: unconfirmedSpent,
      balance: balance,
      underConfirmed: underConfirmed,
      excluded: excluded,
      sapling: sapling,
      orchard: orchard);

  static int pack(fb.Builder fbBuilder, BalanceT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class BalanceT implements fb.Packable {
  int shielded;
  int unconfirmedSpent;
  int balance;
  int underConfirmed;
  int excluded;
  int sapling;
  int orchard;

  BalanceT({
      this.shielded = 0,
      this.unconfirmedSpent = 0,
      this.balance = 0,
      this.underConfirmed = 0,
      this.excluded = 0,
      this.sapling = 0,
      this.orchard = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(7);
    fbBuilder.addUint64(0, shielded);
    fbBuilder.addUint64(1, unconfirmedSpent);
    fbBuilder.addUint64(2, balance);
    fbBuilder.addUint64(3, underConfirmed);
    fbBuilder.addUint64(4, excluded);
    fbBuilder.addUint64(5, sapling);
    fbBuilder.addUint64(6, orchard);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'BalanceT{shielded: ${shielded}, unconfirmedSpent: ${unconfirmedSpent}, balance: ${balance}, underConfirmed: ${underConfirmed}, excluded: ${excluded}, sapling: ${sapling}, orchard: ${orchard}}';
  }
}

class _BalanceReader extends fb.TableReader<Balance> {
  const _BalanceReader();

  @override
  Balance createObject(fb.BufferContext bc, int offset) => 
    Balance._(bc, offset);
}

class BalanceBuilder {
  BalanceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addShielded(int? shielded) {
    fbBuilder.addUint64(0, shielded);
    return fbBuilder.offset;
  }
  int addUnconfirmedSpent(int? unconfirmedSpent) {
    fbBuilder.addUint64(1, unconfirmedSpent);
    return fbBuilder.offset;
  }
  int addBalance(int? balance) {
    fbBuilder.addUint64(2, balance);
    return fbBuilder.offset;
  }
  int addUnderConfirmed(int? underConfirmed) {
    fbBuilder.addUint64(3, underConfirmed);
    return fbBuilder.offset;
  }
  int addExcluded(int? excluded) {
    fbBuilder.addUint64(4, excluded);
    return fbBuilder.offset;
  }
  int addSapling(int? sapling) {
    fbBuilder.addUint64(5, sapling);
    return fbBuilder.offset;
  }
  int addOrchard(int? orchard) {
    fbBuilder.addUint64(6, orchard);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class BalanceObjectBuilder extends fb.ObjectBuilder {
  final int? _shielded;
  final int? _unconfirmedSpent;
  final int? _balance;
  final int? _underConfirmed;
  final int? _excluded;
  final int? _sapling;
  final int? _orchard;

  BalanceObjectBuilder({
    int? shielded,
    int? unconfirmedSpent,
    int? balance,
    int? underConfirmed,
    int? excluded,
    int? sapling,
    int? orchard,
  })
      : _shielded = shielded,
        _unconfirmedSpent = unconfirmedSpent,
        _balance = balance,
        _underConfirmed = underConfirmed,
        _excluded = excluded,
        _sapling = sapling,
        _orchard = orchard;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(7);
    fbBuilder.addUint64(0, _shielded);
    fbBuilder.addUint64(1, _unconfirmedSpent);
    fbBuilder.addUint64(2, _balance);
    fbBuilder.addUint64(3, _underConfirmed);
    fbBuilder.addUint64(4, _excluded);
    fbBuilder.addUint64(5, _sapling);
    fbBuilder.addUint64(6, _orchard);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PoolBalance {
  PoolBalance._(this._bc, this._bcOffset);
  factory PoolBalance(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PoolBalance> reader = _PoolBalanceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get transparent => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get sapling => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get orchard => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 8, 0);

  @override
  String toString() {
    return 'PoolBalance{transparent: ${transparent}, sapling: ${sapling}, orchard: ${orchard}}';
  }

  PoolBalanceT unpack() => PoolBalanceT(
      transparent: transparent,
      sapling: sapling,
      orchard: orchard);

  static int pack(fb.Builder fbBuilder, PoolBalanceT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class PoolBalanceT implements fb.Packable {
  int transparent;
  int sapling;
  int orchard;

  PoolBalanceT({
      this.transparent = 0,
      this.sapling = 0,
      this.orchard = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(3);
    fbBuilder.addUint64(0, transparent);
    fbBuilder.addUint64(1, sapling);
    fbBuilder.addUint64(2, orchard);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'PoolBalanceT{transparent: ${transparent}, sapling: ${sapling}, orchard: ${orchard}}';
  }
}

class _PoolBalanceReader extends fb.TableReader<PoolBalance> {
  const _PoolBalanceReader();

  @override
  PoolBalance createObject(fb.BufferContext bc, int offset) => 
    PoolBalance._(bc, offset);
}

class PoolBalanceBuilder {
  PoolBalanceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addTransparent(int? transparent) {
    fbBuilder.addUint64(0, transparent);
    return fbBuilder.offset;
  }
  int addSapling(int? sapling) {
    fbBuilder.addUint64(1, sapling);
    return fbBuilder.offset;
  }
  int addOrchard(int? orchard) {
    fbBuilder.addUint64(2, orchard);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PoolBalanceObjectBuilder extends fb.ObjectBuilder {
  final int? _transparent;
  final int? _sapling;
  final int? _orchard;

  PoolBalanceObjectBuilder({
    int? transparent,
    int? sapling,
    int? orchard,
  })
      : _transparent = transparent,
        _sapling = sapling,
        _orchard = orchard;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(3);
    fbBuilder.addUint64(0, _transparent);
    fbBuilder.addUint64(1, _sapling);
    fbBuilder.addUint64(2, _orchard);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Height {
  Height._(this._bc, this._bcOffset);
  factory Height(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Height> reader = _HeightReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get height => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get timestamp => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'Height{height: ${height}, timestamp: ${timestamp}}';
  }

  HeightT unpack() => HeightT(
      height: height,
      timestamp: timestamp);

  static int pack(fb.Builder fbBuilder, HeightT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class HeightT implements fb.Packable {
  int height;
  int timestamp;

  HeightT({
      this.height = 0,
      this.timestamp = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, height);
    fbBuilder.addUint32(1, timestamp);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'HeightT{height: ${height}, timestamp: ${timestamp}}';
  }
}

class _HeightReader extends fb.TableReader<Height> {
  const _HeightReader();

  @override
  Height createObject(fb.BufferContext bc, int offset) => 
    Height._(bc, offset);
}

class HeightBuilder {
  HeightBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addHeight(int? height) {
    fbBuilder.addUint32(0, height);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addUint32(1, timestamp);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class HeightObjectBuilder extends fb.ObjectBuilder {
  final int? _height;
  final int? _timestamp;

  HeightObjectBuilder({
    int? height,
    int? timestamp,
  })
      : _height = height,
        _timestamp = timestamp;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, _height);
    fbBuilder.addUint32(1, _timestamp);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ShieldedNote {
  ShieldedNote._(this._bc, this._bcOffset);
  factory ShieldedNote(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ShieldedNote> reader = _ShieldedNoteReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get id => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get height => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get value => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get timestamp => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  bool get orchard => const fb.BoolReader().vTableGet(_bc, _bcOffset, 12, false);
  bool get excluded => const fb.BoolReader().vTableGet(_bc, _bcOffset, 14, false);
  bool get spent => const fb.BoolReader().vTableGet(_bc, _bcOffset, 16, false);

  @override
  String toString() {
    return 'ShieldedNote{id: ${id}, height: ${height}, value: ${value}, timestamp: ${timestamp}, orchard: ${orchard}, excluded: ${excluded}, spent: ${spent}}';
  }

  ShieldedNoteT unpack() => ShieldedNoteT(
      id: id,
      height: height,
      value: value,
      timestamp: timestamp,
      orchard: orchard,
      excluded: excluded,
      spent: spent);

  static int pack(fb.Builder fbBuilder, ShieldedNoteT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ShieldedNoteT implements fb.Packable {
  int id;
  int height;
  int value;
  int timestamp;
  bool orchard;
  bool excluded;
  bool spent;

  ShieldedNoteT({
      this.id = 0,
      this.height = 0,
      this.value = 0,
      this.timestamp = 0,
      this.orchard = false,
      this.excluded = false,
      this.spent = false});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(7);
    fbBuilder.addUint32(0, id);
    fbBuilder.addUint32(1, height);
    fbBuilder.addUint64(2, value);
    fbBuilder.addUint32(3, timestamp);
    fbBuilder.addBool(4, orchard);
    fbBuilder.addBool(5, excluded);
    fbBuilder.addBool(6, spent);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ShieldedNoteT{id: ${id}, height: ${height}, value: ${value}, timestamp: ${timestamp}, orchard: ${orchard}, excluded: ${excluded}, spent: ${spent}}';
  }
}

class _ShieldedNoteReader extends fb.TableReader<ShieldedNote> {
  const _ShieldedNoteReader();

  @override
  ShieldedNote createObject(fb.BufferContext bc, int offset) => 
    ShieldedNote._(bc, offset);
}

class ShieldedNoteBuilder {
  ShieldedNoteBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addId(int? id) {
    fbBuilder.addUint32(0, id);
    return fbBuilder.offset;
  }
  int addHeight(int? height) {
    fbBuilder.addUint32(1, height);
    return fbBuilder.offset;
  }
  int addValue(int? value) {
    fbBuilder.addUint64(2, value);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addUint32(3, timestamp);
    return fbBuilder.offset;
  }
  int addOrchard(bool? orchard) {
    fbBuilder.addBool(4, orchard);
    return fbBuilder.offset;
  }
  int addExcluded(bool? excluded) {
    fbBuilder.addBool(5, excluded);
    return fbBuilder.offset;
  }
  int addSpent(bool? spent) {
    fbBuilder.addBool(6, spent);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ShieldedNoteObjectBuilder extends fb.ObjectBuilder {
  final int? _id;
  final int? _height;
  final int? _value;
  final int? _timestamp;
  final bool? _orchard;
  final bool? _excluded;
  final bool? _spent;

  ShieldedNoteObjectBuilder({
    int? id,
    int? height,
    int? value,
    int? timestamp,
    bool? orchard,
    bool? excluded,
    bool? spent,
  })
      : _id = id,
        _height = height,
        _value = value,
        _timestamp = timestamp,
        _orchard = orchard,
        _excluded = excluded,
        _spent = spent;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(7);
    fbBuilder.addUint32(0, _id);
    fbBuilder.addUint32(1, _height);
    fbBuilder.addUint64(2, _value);
    fbBuilder.addUint32(3, _timestamp);
    fbBuilder.addBool(4, _orchard);
    fbBuilder.addBool(5, _excluded);
    fbBuilder.addBool(6, _spent);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ShieldedNoteVec {
  ShieldedNoteVec._(this._bc, this._bcOffset);
  factory ShieldedNoteVec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ShieldedNoteVec> reader = _ShieldedNoteVecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<ShieldedNote>? get notes => const fb.ListReader<ShieldedNote>(ShieldedNote.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ShieldedNoteVec{notes: ${notes}}';
  }

  ShieldedNoteVecT unpack() => ShieldedNoteVecT(
      notes: notes?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, ShieldedNoteVecT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ShieldedNoteVecT implements fb.Packable {
  List<ShieldedNoteT>? notes;

  ShieldedNoteVecT({
      this.notes});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? notesOffset = notes == null ? null
        : fbBuilder.writeList(notes!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, notesOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ShieldedNoteVecT{notes: ${notes}}';
  }
}

class _ShieldedNoteVecReader extends fb.TableReader<ShieldedNoteVec> {
  const _ShieldedNoteVecReader();

  @override
  ShieldedNoteVec createObject(fb.BufferContext bc, int offset) => 
    ShieldedNoteVec._(bc, offset);
}

class ShieldedNoteVecBuilder {
  ShieldedNoteVecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addNotesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ShieldedNoteVecObjectBuilder extends fb.ObjectBuilder {
  final List<ShieldedNoteObjectBuilder>? _notes;

  ShieldedNoteVecObjectBuilder({
    List<ShieldedNoteObjectBuilder>? notes,
  })
      : _notes = notes;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? notesOffset = _notes == null ? null
        : fbBuilder.writeList(_notes!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, notesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ShieldedTx {
  ShieldedTx._(this._bc, this._bcOffset);
  factory ShieldedTx(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ShieldedTx> reader = _ShieldedTxReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get id => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  String? get txId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  int get height => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  String? get shortTxId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  int get timestamp => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  int get value => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 16, 0);
  String? get address => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  String? get memo => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  MemoVec? get messages => MemoVec.reader.vTableGetNullable(_bc, _bcOffset, 22);

  @override
  String toString() {
    return 'ShieldedTx{id: ${id}, txId: ${txId}, height: ${height}, shortTxId: ${shortTxId}, timestamp: ${timestamp}, name: ${name}, value: ${value}, address: ${address}, memo: ${memo}, messages: ${messages}}';
  }

  ShieldedTxT unpack() => ShieldedTxT(
      id: id,
      txId: txId,
      height: height,
      shortTxId: shortTxId,
      timestamp: timestamp,
      name: name,
      value: value,
      address: address,
      memo: memo,
      messages: messages?.unpack());

  static int pack(fb.Builder fbBuilder, ShieldedTxT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ShieldedTxT implements fb.Packable {
  int id;
  String? txId;
  int height;
  String? shortTxId;
  int timestamp;
  String? name;
  int value;
  String? address;
  String? memo;
  MemoVecT? messages;

  ShieldedTxT({
      this.id = 0,
      this.txId,
      this.height = 0,
      this.shortTxId,
      this.timestamp = 0,
      this.name,
      this.value = 0,
      this.address,
      this.memo,
      this.messages});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? txIdOffset = txId == null ? null
        : fbBuilder.writeString(txId!);
    final int? shortTxIdOffset = shortTxId == null ? null
        : fbBuilder.writeString(shortTxId!);
    final int? nameOffset = name == null ? null
        : fbBuilder.writeString(name!);
    final int? addressOffset = address == null ? null
        : fbBuilder.writeString(address!);
    final int? memoOffset = memo == null ? null
        : fbBuilder.writeString(memo!);
    final int? messagesOffset = messages?.pack(fbBuilder);
    fbBuilder.startTable(10);
    fbBuilder.addUint32(0, id);
    fbBuilder.addOffset(1, txIdOffset);
    fbBuilder.addUint32(2, height);
    fbBuilder.addOffset(3, shortTxIdOffset);
    fbBuilder.addUint32(4, timestamp);
    fbBuilder.addOffset(5, nameOffset);
    fbBuilder.addUint64(6, value);
    fbBuilder.addOffset(7, addressOffset);
    fbBuilder.addOffset(8, memoOffset);
    fbBuilder.addOffset(9, messagesOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ShieldedTxT{id: ${id}, txId: ${txId}, height: ${height}, shortTxId: ${shortTxId}, timestamp: ${timestamp}, name: ${name}, value: ${value}, address: ${address}, memo: ${memo}, messages: ${messages}}';
  }
}

class _ShieldedTxReader extends fb.TableReader<ShieldedTx> {
  const _ShieldedTxReader();

  @override
  ShieldedTx createObject(fb.BufferContext bc, int offset) => 
    ShieldedTx._(bc, offset);
}

class ShieldedTxBuilder {
  ShieldedTxBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(10);
  }

  int addId(int? id) {
    fbBuilder.addUint32(0, id);
    return fbBuilder.offset;
  }
  int addTxIdOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addHeight(int? height) {
    fbBuilder.addUint32(2, height);
    return fbBuilder.offset;
  }
  int addShortTxIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addUint32(4, timestamp);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addValue(int? value) {
    fbBuilder.addUint64(6, value);
    return fbBuilder.offset;
  }
  int addAddressOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addMemoOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addMessagesOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ShieldedTxObjectBuilder extends fb.ObjectBuilder {
  final int? _id;
  final String? _txId;
  final int? _height;
  final String? _shortTxId;
  final int? _timestamp;
  final String? _name;
  final int? _value;
  final String? _address;
  final String? _memo;
  final MemoVecObjectBuilder? _messages;

  ShieldedTxObjectBuilder({
    int? id,
    String? txId,
    int? height,
    String? shortTxId,
    int? timestamp,
    String? name,
    int? value,
    String? address,
    String? memo,
    MemoVecObjectBuilder? messages,
  })
      : _id = id,
        _txId = txId,
        _height = height,
        _shortTxId = shortTxId,
        _timestamp = timestamp,
        _name = name,
        _value = value,
        _address = address,
        _memo = memo,
        _messages = messages;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? txIdOffset = _txId == null ? null
        : fbBuilder.writeString(_txId!);
    final int? shortTxIdOffset = _shortTxId == null ? null
        : fbBuilder.writeString(_shortTxId!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? addressOffset = _address == null ? null
        : fbBuilder.writeString(_address!);
    final int? memoOffset = _memo == null ? null
        : fbBuilder.writeString(_memo!);
    final int? messagesOffset = _messages?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(10);
    fbBuilder.addUint32(0, _id);
    fbBuilder.addOffset(1, txIdOffset);
    fbBuilder.addUint32(2, _height);
    fbBuilder.addOffset(3, shortTxIdOffset);
    fbBuilder.addUint32(4, _timestamp);
    fbBuilder.addOffset(5, nameOffset);
    fbBuilder.addUint64(6, _value);
    fbBuilder.addOffset(7, addressOffset);
    fbBuilder.addOffset(8, memoOffset);
    fbBuilder.addOffset(9, messagesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ShieldedTxVec {
  ShieldedTxVec._(this._bc, this._bcOffset);
  factory ShieldedTxVec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ShieldedTxVec> reader = _ShieldedTxVecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<ShieldedTx>? get txs => const fb.ListReader<ShieldedTx>(ShieldedTx.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ShieldedTxVec{txs: ${txs}}';
  }

  ShieldedTxVecT unpack() => ShieldedTxVecT(
      txs: txs?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, ShieldedTxVecT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ShieldedTxVecT implements fb.Packable {
  List<ShieldedTxT>? txs;

  ShieldedTxVecT({
      this.txs});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? txsOffset = txs == null ? null
        : fbBuilder.writeList(txs!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, txsOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ShieldedTxVecT{txs: ${txs}}';
  }
}

class _ShieldedTxVecReader extends fb.TableReader<ShieldedTxVec> {
  const _ShieldedTxVecReader();

  @override
  ShieldedTxVec createObject(fb.BufferContext bc, int offset) => 
    ShieldedTxVec._(bc, offset);
}

class ShieldedTxVecBuilder {
  ShieldedTxVecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addTxsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ShieldedTxVecObjectBuilder extends fb.ObjectBuilder {
  final List<ShieldedTxObjectBuilder>? _txs;

  ShieldedTxVecObjectBuilder({
    List<ShieldedTxObjectBuilder>? txs,
  })
      : _txs = txs;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? txsOffset = _txs == null ? null
        : fbBuilder.writeList(_txs!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, txsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Message {
  Message._(this._bc, this._bcOffset);
  factory Message(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Message> reader = _MessageReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get idMsg => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get idTx => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get height => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get timestamp => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  String? get sender => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get from => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  String? get to => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  String? get subject => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  String? get body => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  bool get read => const fb.BoolReader().vTableGet(_bc, _bcOffset, 22, false);
  bool get incoming => const fb.BoolReader().vTableGet(_bc, _bcOffset, 24, false);

  @override
  String toString() {
    return 'Message{idMsg: ${idMsg}, idTx: ${idTx}, height: ${height}, timestamp: ${timestamp}, sender: ${sender}, from: ${from}, to: ${to}, subject: ${subject}, body: ${body}, read: ${read}, incoming: ${incoming}}';
  }

  MessageT unpack() => MessageT(
      idMsg: idMsg,
      idTx: idTx,
      height: height,
      timestamp: timestamp,
      sender: sender,
      from: from,
      to: to,
      subject: subject,
      body: body,
      read: read,
      incoming: incoming);

  static int pack(fb.Builder fbBuilder, MessageT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class MessageT implements fb.Packable {
  int idMsg;
  int idTx;
  int height;
  int timestamp;
  String? sender;
  String? from;
  String? to;
  String? subject;
  String? body;
  bool read;
  bool incoming;

  MessageT({
      this.idMsg = 0,
      this.idTx = 0,
      this.height = 0,
      this.timestamp = 0,
      this.sender,
      this.from,
      this.to,
      this.subject,
      this.body,
      this.read = false,
      this.incoming = false});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? senderOffset = sender == null ? null
        : fbBuilder.writeString(sender!);
    final int? fromOffset = from == null ? null
        : fbBuilder.writeString(from!);
    final int? toOffset = to == null ? null
        : fbBuilder.writeString(to!);
    final int? subjectOffset = subject == null ? null
        : fbBuilder.writeString(subject!);
    final int? bodyOffset = body == null ? null
        : fbBuilder.writeString(body!);
    fbBuilder.startTable(11);
    fbBuilder.addUint32(0, idMsg);
    fbBuilder.addUint32(1, idTx);
    fbBuilder.addUint32(2, height);
    fbBuilder.addUint32(3, timestamp);
    fbBuilder.addOffset(4, senderOffset);
    fbBuilder.addOffset(5, fromOffset);
    fbBuilder.addOffset(6, toOffset);
    fbBuilder.addOffset(7, subjectOffset);
    fbBuilder.addOffset(8, bodyOffset);
    fbBuilder.addBool(9, read);
    fbBuilder.addBool(10, incoming);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'MessageT{idMsg: ${idMsg}, idTx: ${idTx}, height: ${height}, timestamp: ${timestamp}, sender: ${sender}, from: ${from}, to: ${to}, subject: ${subject}, body: ${body}, read: ${read}, incoming: ${incoming}}';
  }
}

class _MessageReader extends fb.TableReader<Message> {
  const _MessageReader();

  @override
  Message createObject(fb.BufferContext bc, int offset) => 
    Message._(bc, offset);
}

class MessageBuilder {
  MessageBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(11);
  }

  int addIdMsg(int? idMsg) {
    fbBuilder.addUint32(0, idMsg);
    return fbBuilder.offset;
  }
  int addIdTx(int? idTx) {
    fbBuilder.addUint32(1, idTx);
    return fbBuilder.offset;
  }
  int addHeight(int? height) {
    fbBuilder.addUint32(2, height);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addUint32(3, timestamp);
    return fbBuilder.offset;
  }
  int addSenderOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addFromOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addToOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addSubjectOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addBodyOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addRead(bool? read) {
    fbBuilder.addBool(9, read);
    return fbBuilder.offset;
  }
  int addIncoming(bool? incoming) {
    fbBuilder.addBool(10, incoming);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MessageObjectBuilder extends fb.ObjectBuilder {
  final int? _idMsg;
  final int? _idTx;
  final int? _height;
  final int? _timestamp;
  final String? _sender;
  final String? _from;
  final String? _to;
  final String? _subject;
  final String? _body;
  final bool? _read;
  final bool? _incoming;

  MessageObjectBuilder({
    int? idMsg,
    int? idTx,
    int? height,
    int? timestamp,
    String? sender,
    String? from,
    String? to,
    String? subject,
    String? body,
    bool? read,
    bool? incoming,
  })
      : _idMsg = idMsg,
        _idTx = idTx,
        _height = height,
        _timestamp = timestamp,
        _sender = sender,
        _from = from,
        _to = to,
        _subject = subject,
        _body = body,
        _read = read,
        _incoming = incoming;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? senderOffset = _sender == null ? null
        : fbBuilder.writeString(_sender!);
    final int? fromOffset = _from == null ? null
        : fbBuilder.writeString(_from!);
    final int? toOffset = _to == null ? null
        : fbBuilder.writeString(_to!);
    final int? subjectOffset = _subject == null ? null
        : fbBuilder.writeString(_subject!);
    final int? bodyOffset = _body == null ? null
        : fbBuilder.writeString(_body!);
    fbBuilder.startTable(11);
    fbBuilder.addUint32(0, _idMsg);
    fbBuilder.addUint32(1, _idTx);
    fbBuilder.addUint32(2, _height);
    fbBuilder.addUint32(3, _timestamp);
    fbBuilder.addOffset(4, senderOffset);
    fbBuilder.addOffset(5, fromOffset);
    fbBuilder.addOffset(6, toOffset);
    fbBuilder.addOffset(7, subjectOffset);
    fbBuilder.addOffset(8, bodyOffset);
    fbBuilder.addBool(9, _read);
    fbBuilder.addBool(10, _incoming);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class MessageVec {
  MessageVec._(this._bc, this._bcOffset);
  factory MessageVec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MessageVec> reader = _MessageVecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Message>? get messages => const fb.ListReader<Message>(Message.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'MessageVec{messages: ${messages}}';
  }

  MessageVecT unpack() => MessageVecT(
      messages: messages?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, MessageVecT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class MessageVecT implements fb.Packable {
  List<MessageT>? messages;

  MessageVecT({
      this.messages});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? messagesOffset = messages == null ? null
        : fbBuilder.writeList(messages!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, messagesOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'MessageVecT{messages: ${messages}}';
  }
}

class _MessageVecReader extends fb.TableReader<MessageVec> {
  const _MessageVecReader();

  @override
  MessageVec createObject(fb.BufferContext bc, int offset) => 
    MessageVec._(bc, offset);
}

class MessageVecBuilder {
  MessageVecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addMessagesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MessageVecObjectBuilder extends fb.ObjectBuilder {
  final List<MessageObjectBuilder>? _messages;

  MessageVecObjectBuilder({
    List<MessageObjectBuilder>? messages,
  })
      : _messages = messages;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messagesOffset = _messages == null ? null
        : fbBuilder.writeList(_messages!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, messagesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Memo {
  Memo._(this._bc, this._bcOffset);
  factory Memo(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Memo> reader = _MemoReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get direction => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 4, 0);
  String? get address => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get memo => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'Memo{direction: ${direction}, address: ${address}, memo: ${memo}}';
  }

  MemoT unpack() => MemoT(
      direction: direction,
      address: address,
      memo: memo);

  static int pack(fb.Builder fbBuilder, MemoT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class MemoT implements fb.Packable {
  int direction;
  String? address;
  String? memo;

  MemoT({
      this.direction = 0,
      this.address,
      this.memo});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? addressOffset = address == null ? null
        : fbBuilder.writeString(address!);
    final int? memoOffset = memo == null ? null
        : fbBuilder.writeString(memo!);
    fbBuilder.startTable(3);
    fbBuilder.addUint8(0, direction);
    fbBuilder.addOffset(1, addressOffset);
    fbBuilder.addOffset(2, memoOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'MemoT{direction: ${direction}, address: ${address}, memo: ${memo}}';
  }
}

class _MemoReader extends fb.TableReader<Memo> {
  const _MemoReader();

  @override
  Memo createObject(fb.BufferContext bc, int offset) => 
    Memo._(bc, offset);
}

class MemoBuilder {
  MemoBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addDirection(int? direction) {
    fbBuilder.addUint8(0, direction);
    return fbBuilder.offset;
  }
  int addAddressOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addMemoOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MemoObjectBuilder extends fb.ObjectBuilder {
  final int? _direction;
  final String? _address;
  final String? _memo;

  MemoObjectBuilder({
    int? direction,
    String? address,
    String? memo,
  })
      : _direction = direction,
        _address = address,
        _memo = memo;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? addressOffset = _address == null ? null
        : fbBuilder.writeString(_address!);
    final int? memoOffset = _memo == null ? null
        : fbBuilder.writeString(_memo!);
    fbBuilder.startTable(3);
    fbBuilder.addUint8(0, _direction);
    fbBuilder.addOffset(1, addressOffset);
    fbBuilder.addOffset(2, memoOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class MemoVec {
  MemoVec._(this._bc, this._bcOffset);
  factory MemoVec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MemoVec> reader = _MemoVecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Memo>? get memos => const fb.ListReader<Memo>(Memo.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'MemoVec{memos: ${memos}}';
  }

  MemoVecT unpack() => MemoVecT(
      memos: memos?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, MemoVecT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class MemoVecT implements fb.Packable {
  List<MemoT>? memos;

  MemoVecT({
      this.memos});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? memosOffset = memos == null ? null
        : fbBuilder.writeList(memos!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, memosOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'MemoVecT{memos: ${memos}}';
  }
}

class _MemoVecReader extends fb.TableReader<MemoVec> {
  const _MemoVecReader();

  @override
  MemoVec createObject(fb.BufferContext bc, int offset) => 
    MemoVec._(bc, offset);
}

class MemoVecBuilder {
  MemoVecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addMemosOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MemoVecObjectBuilder extends fb.ObjectBuilder {
  final List<MemoObjectBuilder>? _memos;

  MemoVecObjectBuilder({
    List<MemoObjectBuilder>? memos,
  })
      : _memos = memos;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? memosOffset = _memos == null ? null
        : fbBuilder.writeList(_memos!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, memosOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PrevNext {
  PrevNext._(this._bc, this._bcOffset);
  factory PrevNext(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PrevNext> reader = _PrevNextReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get prev => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get next => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'PrevNext{prev: ${prev}, next: ${next}}';
  }

  PrevNextT unpack() => PrevNextT(
      prev: prev,
      next: next);

  static int pack(fb.Builder fbBuilder, PrevNextT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class PrevNextT implements fb.Packable {
  int prev;
  int next;

  PrevNextT({
      this.prev = 0,
      this.next = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, prev);
    fbBuilder.addUint32(1, next);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'PrevNextT{prev: ${prev}, next: ${next}}';
  }
}

class _PrevNextReader extends fb.TableReader<PrevNext> {
  const _PrevNextReader();

  @override
  PrevNext createObject(fb.BufferContext bc, int offset) => 
    PrevNext._(bc, offset);
}

class PrevNextBuilder {
  PrevNextBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addPrev(int? prev) {
    fbBuilder.addUint32(0, prev);
    return fbBuilder.offset;
  }
  int addNext(int? next) {
    fbBuilder.addUint32(1, next);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PrevNextObjectBuilder extends fb.ObjectBuilder {
  final int? _prev;
  final int? _next;

  PrevNextObjectBuilder({
    int? prev,
    int? next,
  })
      : _prev = prev,
        _next = next;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, _prev);
    fbBuilder.addUint32(1, _next);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SendTemplate {
  SendTemplate._(this._bc, this._bcOffset);
  factory SendTemplate(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SendTemplate> reader = _SendTemplateReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get id => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  String? get title => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get address => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  int get amount => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 10, 0);
  double get fiatAmount => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  bool get feeIncluded => const fb.BoolReader().vTableGet(_bc, _bcOffset, 14, false);
  String? get fiat => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  bool get includeReplyTo => const fb.BoolReader().vTableGet(_bc, _bcOffset, 18, false);
  String? get subject => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  String? get body => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);

  @override
  String toString() {
    return 'SendTemplate{id: ${id}, title: ${title}, address: ${address}, amount: ${amount}, fiatAmount: ${fiatAmount}, feeIncluded: ${feeIncluded}, fiat: ${fiat}, includeReplyTo: ${includeReplyTo}, subject: ${subject}, body: ${body}}';
  }

  SendTemplateT unpack() => SendTemplateT(
      id: id,
      title: title,
      address: address,
      amount: amount,
      fiatAmount: fiatAmount,
      feeIncluded: feeIncluded,
      fiat: fiat,
      includeReplyTo: includeReplyTo,
      subject: subject,
      body: body);

  static int pack(fb.Builder fbBuilder, SendTemplateT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class SendTemplateT implements fb.Packable {
  int id;
  String? title;
  String? address;
  int amount;
  double fiatAmount;
  bool feeIncluded;
  String? fiat;
  bool includeReplyTo;
  String? subject;
  String? body;

  SendTemplateT({
      this.id = 0,
      this.title,
      this.address,
      this.amount = 0,
      this.fiatAmount = 0.0,
      this.feeIncluded = false,
      this.fiat,
      this.includeReplyTo = false,
      this.subject,
      this.body});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? titleOffset = title == null ? null
        : fbBuilder.writeString(title!);
    final int? addressOffset = address == null ? null
        : fbBuilder.writeString(address!);
    final int? fiatOffset = fiat == null ? null
        : fbBuilder.writeString(fiat!);
    final int? subjectOffset = subject == null ? null
        : fbBuilder.writeString(subject!);
    final int? bodyOffset = body == null ? null
        : fbBuilder.writeString(body!);
    fbBuilder.startTable(10);
    fbBuilder.addUint32(0, id);
    fbBuilder.addOffset(1, titleOffset);
    fbBuilder.addOffset(2, addressOffset);
    fbBuilder.addUint64(3, amount);
    fbBuilder.addFloat64(4, fiatAmount);
    fbBuilder.addBool(5, feeIncluded);
    fbBuilder.addOffset(6, fiatOffset);
    fbBuilder.addBool(7, includeReplyTo);
    fbBuilder.addOffset(8, subjectOffset);
    fbBuilder.addOffset(9, bodyOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'SendTemplateT{id: ${id}, title: ${title}, address: ${address}, amount: ${amount}, fiatAmount: ${fiatAmount}, feeIncluded: ${feeIncluded}, fiat: ${fiat}, includeReplyTo: ${includeReplyTo}, subject: ${subject}, body: ${body}}';
  }
}

class _SendTemplateReader extends fb.TableReader<SendTemplate> {
  const _SendTemplateReader();

  @override
  SendTemplate createObject(fb.BufferContext bc, int offset) => 
    SendTemplate._(bc, offset);
}

class SendTemplateBuilder {
  SendTemplateBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(10);
  }

  int addId(int? id) {
    fbBuilder.addUint32(0, id);
    return fbBuilder.offset;
  }
  int addTitleOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addAddressOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addAmount(int? amount) {
    fbBuilder.addUint64(3, amount);
    return fbBuilder.offset;
  }
  int addFiatAmount(double? fiatAmount) {
    fbBuilder.addFloat64(4, fiatAmount);
    return fbBuilder.offset;
  }
  int addFeeIncluded(bool? feeIncluded) {
    fbBuilder.addBool(5, feeIncluded);
    return fbBuilder.offset;
  }
  int addFiatOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addIncludeReplyTo(bool? includeReplyTo) {
    fbBuilder.addBool(7, includeReplyTo);
    return fbBuilder.offset;
  }
  int addSubjectOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addBodyOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SendTemplateObjectBuilder extends fb.ObjectBuilder {
  final int? _id;
  final String? _title;
  final String? _address;
  final int? _amount;
  final double? _fiatAmount;
  final bool? _feeIncluded;
  final String? _fiat;
  final bool? _includeReplyTo;
  final String? _subject;
  final String? _body;

  SendTemplateObjectBuilder({
    int? id,
    String? title,
    String? address,
    int? amount,
    double? fiatAmount,
    bool? feeIncluded,
    String? fiat,
    bool? includeReplyTo,
    String? subject,
    String? body,
  })
      : _id = id,
        _title = title,
        _address = address,
        _amount = amount,
        _fiatAmount = fiatAmount,
        _feeIncluded = feeIncluded,
        _fiat = fiat,
        _includeReplyTo = includeReplyTo,
        _subject = subject,
        _body = body;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? titleOffset = _title == null ? null
        : fbBuilder.writeString(_title!);
    final int? addressOffset = _address == null ? null
        : fbBuilder.writeString(_address!);
    final int? fiatOffset = _fiat == null ? null
        : fbBuilder.writeString(_fiat!);
    final int? subjectOffset = _subject == null ? null
        : fbBuilder.writeString(_subject!);
    final int? bodyOffset = _body == null ? null
        : fbBuilder.writeString(_body!);
    fbBuilder.startTable(10);
    fbBuilder.addUint32(0, _id);
    fbBuilder.addOffset(1, titleOffset);
    fbBuilder.addOffset(2, addressOffset);
    fbBuilder.addUint64(3, _amount);
    fbBuilder.addFloat64(4, _fiatAmount);
    fbBuilder.addBool(5, _feeIncluded);
    fbBuilder.addOffset(6, fiatOffset);
    fbBuilder.addBool(7, _includeReplyTo);
    fbBuilder.addOffset(8, subjectOffset);
    fbBuilder.addOffset(9, bodyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SendTemplateVec {
  SendTemplateVec._(this._bc, this._bcOffset);
  factory SendTemplateVec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SendTemplateVec> reader = _SendTemplateVecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<SendTemplate>? get templates => const fb.ListReader<SendTemplate>(SendTemplate.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'SendTemplateVec{templates: ${templates}}';
  }

  SendTemplateVecT unpack() => SendTemplateVecT(
      templates: templates?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, SendTemplateVecT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class SendTemplateVecT implements fb.Packable {
  List<SendTemplateT>? templates;

  SendTemplateVecT({
      this.templates});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? templatesOffset = templates == null ? null
        : fbBuilder.writeList(templates!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, templatesOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'SendTemplateVecT{templates: ${templates}}';
  }
}

class _SendTemplateVecReader extends fb.TableReader<SendTemplateVec> {
  const _SendTemplateVecReader();

  @override
  SendTemplateVec createObject(fb.BufferContext bc, int offset) => 
    SendTemplateVec._(bc, offset);
}

class SendTemplateVecBuilder {
  SendTemplateVecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addTemplatesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SendTemplateVecObjectBuilder extends fb.ObjectBuilder {
  final List<SendTemplateObjectBuilder>? _templates;

  SendTemplateVecObjectBuilder({
    List<SendTemplateObjectBuilder>? templates,
  })
      : _templates = templates;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? templatesOffset = _templates == null ? null
        : fbBuilder.writeList(_templates!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, templatesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Contact {
  Contact._(this._bc, this._bcOffset);
  factory Contact(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Contact> reader = _ContactReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get id => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get address => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'Contact{id: ${id}, name: ${name}, address: ${address}}';
  }

  ContactT unpack() => ContactT(
      id: id,
      name: name,
      address: address);

  static int pack(fb.Builder fbBuilder, ContactT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ContactT implements fb.Packable {
  int id;
  String? name;
  String? address;

  ContactT({
      this.id = 0,
      this.name,
      this.address});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? nameOffset = name == null ? null
        : fbBuilder.writeString(name!);
    final int? addressOffset = address == null ? null
        : fbBuilder.writeString(address!);
    fbBuilder.startTable(3);
    fbBuilder.addUint32(0, id);
    fbBuilder.addOffset(1, nameOffset);
    fbBuilder.addOffset(2, addressOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ContactT{id: ${id}, name: ${name}, address: ${address}}';
  }
}

class _ContactReader extends fb.TableReader<Contact> {
  const _ContactReader();

  @override
  Contact createObject(fb.BufferContext bc, int offset) => 
    Contact._(bc, offset);
}

class ContactBuilder {
  ContactBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addId(int? id) {
    fbBuilder.addUint32(0, id);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addAddressOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ContactObjectBuilder extends fb.ObjectBuilder {
  final int? _id;
  final String? _name;
  final String? _address;

  ContactObjectBuilder({
    int? id,
    String? name,
    String? address,
  })
      : _id = id,
        _name = name,
        _address = address;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? addressOffset = _address == null ? null
        : fbBuilder.writeString(_address!);
    fbBuilder.startTable(3);
    fbBuilder.addUint32(0, _id);
    fbBuilder.addOffset(1, nameOffset);
    fbBuilder.addOffset(2, addressOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ContactVec {
  ContactVec._(this._bc, this._bcOffset);
  factory ContactVec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ContactVec> reader = _ContactVecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Contact>? get contacts => const fb.ListReader<Contact>(Contact.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ContactVec{contacts: ${contacts}}';
  }

  ContactVecT unpack() => ContactVecT(
      contacts: contacts?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, ContactVecT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ContactVecT implements fb.Packable {
  List<ContactT>? contacts;

  ContactVecT({
      this.contacts});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? contactsOffset = contacts == null ? null
        : fbBuilder.writeList(contacts!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, contactsOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ContactVecT{contacts: ${contacts}}';
  }
}

class _ContactVecReader extends fb.TableReader<ContactVec> {
  const _ContactVecReader();

  @override
  ContactVec createObject(fb.BufferContext bc, int offset) => 
    ContactVec._(bc, offset);
}

class ContactVecBuilder {
  ContactVecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addContactsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ContactVecObjectBuilder extends fb.ObjectBuilder {
  final List<ContactObjectBuilder>? _contacts;

  ContactVecObjectBuilder({
    List<ContactObjectBuilder>? contacts,
  })
      : _contacts = contacts;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? contactsOffset = _contacts == null ? null
        : fbBuilder.writeList(_contacts!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, contactsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class TxTimeValue {
  TxTimeValue._(this._bc, this._bcOffset);
  factory TxTimeValue(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TxTimeValue> reader = _TxTimeValueReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get timestamp => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get value => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'TxTimeValue{timestamp: ${timestamp}, value: ${value}}';
  }

  TxTimeValueT unpack() => TxTimeValueT(
      timestamp: timestamp,
      value: value);

  static int pack(fb.Builder fbBuilder, TxTimeValueT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class TxTimeValueT implements fb.Packable {
  int timestamp;
  int value;

  TxTimeValueT({
      this.timestamp = 0,
      this.value = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, timestamp);
    fbBuilder.addInt64(1, value);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'TxTimeValueT{timestamp: ${timestamp}, value: ${value}}';
  }
}

class _TxTimeValueReader extends fb.TableReader<TxTimeValue> {
  const _TxTimeValueReader();

  @override
  TxTimeValue createObject(fb.BufferContext bc, int offset) => 
    TxTimeValue._(bc, offset);
}

class TxTimeValueBuilder {
  TxTimeValueBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addTimestamp(int? timestamp) {
    fbBuilder.addUint32(0, timestamp);
    return fbBuilder.offset;
  }
  int addValue(int? value) {
    fbBuilder.addInt64(1, value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TxTimeValueObjectBuilder extends fb.ObjectBuilder {
  final int? _timestamp;
  final int? _value;

  TxTimeValueObjectBuilder({
    int? timestamp,
    int? value,
  })
      : _timestamp = timestamp,
        _value = value;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, _timestamp);
    fbBuilder.addInt64(1, _value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class TxTimeValueVec {
  TxTimeValueVec._(this._bc, this._bcOffset);
  factory TxTimeValueVec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TxTimeValueVec> reader = _TxTimeValueVecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<TxTimeValue>? get values => const fb.ListReader<TxTimeValue>(TxTimeValue.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'TxTimeValueVec{values: ${values}}';
  }

  TxTimeValueVecT unpack() => TxTimeValueVecT(
      values: values?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, TxTimeValueVecT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class TxTimeValueVecT implements fb.Packable {
  List<TxTimeValueT>? values;

  TxTimeValueVecT({
      this.values});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? valuesOffset = values == null ? null
        : fbBuilder.writeList(values!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, valuesOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'TxTimeValueVecT{values: ${values}}';
  }
}

class _TxTimeValueVecReader extends fb.TableReader<TxTimeValueVec> {
  const _TxTimeValueVecReader();

  @override
  TxTimeValueVec createObject(fb.BufferContext bc, int offset) => 
    TxTimeValueVec._(bc, offset);
}

class TxTimeValueVecBuilder {
  TxTimeValueVecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addValuesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TxTimeValueVecObjectBuilder extends fb.ObjectBuilder {
  final List<TxTimeValueObjectBuilder>? _values;

  TxTimeValueVecObjectBuilder({
    List<TxTimeValueObjectBuilder>? values,
  })
      : _values = values;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? valuesOffset = _values == null ? null
        : fbBuilder.writeList(_values!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, valuesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Quote {
  Quote._(this._bc, this._bcOffset);
  factory Quote(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Quote> reader = _QuoteReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get timestamp => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  double get price => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 6, 0.0);

  @override
  String toString() {
    return 'Quote{timestamp: ${timestamp}, price: ${price}}';
  }

  QuoteT unpack() => QuoteT(
      timestamp: timestamp,
      price: price);

  static int pack(fb.Builder fbBuilder, QuoteT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class QuoteT implements fb.Packable {
  int timestamp;
  double price;

  QuoteT({
      this.timestamp = 0,
      this.price = 0.0});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, timestamp);
    fbBuilder.addFloat64(1, price);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'QuoteT{timestamp: ${timestamp}, price: ${price}}';
  }
}

class _QuoteReader extends fb.TableReader<Quote> {
  const _QuoteReader();

  @override
  Quote createObject(fb.BufferContext bc, int offset) => 
    Quote._(bc, offset);
}

class QuoteBuilder {
  QuoteBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addTimestamp(int? timestamp) {
    fbBuilder.addUint32(0, timestamp);
    return fbBuilder.offset;
  }
  int addPrice(double? price) {
    fbBuilder.addFloat64(1, price);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class QuoteObjectBuilder extends fb.ObjectBuilder {
  final int? _timestamp;
  final double? _price;

  QuoteObjectBuilder({
    int? timestamp,
    double? price,
  })
      : _timestamp = timestamp,
        _price = price;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, _timestamp);
    fbBuilder.addFloat64(1, _price);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class QuoteVec {
  QuoteVec._(this._bc, this._bcOffset);
  factory QuoteVec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<QuoteVec> reader = _QuoteVecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Quote>? get values => const fb.ListReader<Quote>(Quote.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'QuoteVec{values: ${values}}';
  }

  QuoteVecT unpack() => QuoteVecT(
      values: values?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, QuoteVecT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class QuoteVecT implements fb.Packable {
  List<QuoteT>? values;

  QuoteVecT({
      this.values});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? valuesOffset = values == null ? null
        : fbBuilder.writeList(values!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, valuesOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'QuoteVecT{values: ${values}}';
  }
}

class _QuoteVecReader extends fb.TableReader<QuoteVec> {
  const _QuoteVecReader();

  @override
  QuoteVec createObject(fb.BufferContext bc, int offset) => 
    QuoteVec._(bc, offset);
}

class QuoteVecBuilder {
  QuoteVecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addValuesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class QuoteVecObjectBuilder extends fb.ObjectBuilder {
  final List<QuoteObjectBuilder>? _values;

  QuoteVecObjectBuilder({
    List<QuoteObjectBuilder>? values,
  })
      : _values = values;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? valuesOffset = _values == null ? null
        : fbBuilder.writeList(_values!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, valuesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Spending {
  Spending._(this._bc, this._bcOffset);
  factory Spending(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Spending> reader = _SpendingReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get recipient => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get amount => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'Spending{recipient: ${recipient}, amount: ${amount}}';
  }

  SpendingT unpack() => SpendingT(
      recipient: recipient,
      amount: amount);

  static int pack(fb.Builder fbBuilder, SpendingT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class SpendingT implements fb.Packable {
  String? recipient;
  int amount;

  SpendingT({
      this.recipient,
      this.amount = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? recipientOffset = recipient == null ? null
        : fbBuilder.writeString(recipient!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, recipientOffset);
    fbBuilder.addInt64(1, amount);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'SpendingT{recipient: ${recipient}, amount: ${amount}}';
  }
}

class _SpendingReader extends fb.TableReader<Spending> {
  const _SpendingReader();

  @override
  Spending createObject(fb.BufferContext bc, int offset) => 
    Spending._(bc, offset);
}

class SpendingBuilder {
  SpendingBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addRecipientOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addAmount(int? amount) {
    fbBuilder.addInt64(1, amount);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SpendingObjectBuilder extends fb.ObjectBuilder {
  final String? _recipient;
  final int? _amount;

  SpendingObjectBuilder({
    String? recipient,
    int? amount,
  })
      : _recipient = recipient,
        _amount = amount;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? recipientOffset = _recipient == null ? null
        : fbBuilder.writeString(_recipient!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, recipientOffset);
    fbBuilder.addInt64(1, _amount);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SpendingVec {
  SpendingVec._(this._bc, this._bcOffset);
  factory SpendingVec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SpendingVec> reader = _SpendingVecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Spending>? get values => const fb.ListReader<Spending>(Spending.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'SpendingVec{values: ${values}}';
  }

  SpendingVecT unpack() => SpendingVecT(
      values: values?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, SpendingVecT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class SpendingVecT implements fb.Packable {
  List<SpendingT>? values;

  SpendingVecT({
      this.values});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? valuesOffset = values == null ? null
        : fbBuilder.writeList(values!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, valuesOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'SpendingVecT{values: ${values}}';
  }
}

class _SpendingVecReader extends fb.TableReader<SpendingVec> {
  const _SpendingVecReader();

  @override
  SpendingVec createObject(fb.BufferContext bc, int offset) => 
    SpendingVec._(bc, offset);
}

class SpendingVecBuilder {
  SpendingVecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addValuesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SpendingVecObjectBuilder extends fb.ObjectBuilder {
  final List<SpendingObjectBuilder>? _values;

  SpendingVecObjectBuilder({
    List<SpendingObjectBuilder>? values,
  })
      : _values = values;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? valuesOffset = _values == null ? null
        : fbBuilder.writeList(_values!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, valuesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class AddressBalance {
  AddressBalance._(this._bc, this._bcOffset);
  factory AddressBalance(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AddressBalance> reader = _AddressBalanceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get index => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  String? get address => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  int get balance => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 8, 0);

  @override
  String toString() {
    return 'AddressBalance{index: ${index}, address: ${address}, balance: ${balance}}';
  }

  AddressBalanceT unpack() => AddressBalanceT(
      index: index,
      address: address,
      balance: balance);

  static int pack(fb.Builder fbBuilder, AddressBalanceT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class AddressBalanceT implements fb.Packable {
  int index;
  String? address;
  int balance;

  AddressBalanceT({
      this.index = 0,
      this.address,
      this.balance = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? addressOffset = address == null ? null
        : fbBuilder.writeString(address!);
    fbBuilder.startTable(3);
    fbBuilder.addUint32(0, index);
    fbBuilder.addOffset(1, addressOffset);
    fbBuilder.addUint64(2, balance);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'AddressBalanceT{index: ${index}, address: ${address}, balance: ${balance}}';
  }
}

class _AddressBalanceReader extends fb.TableReader<AddressBalance> {
  const _AddressBalanceReader();

  @override
  AddressBalance createObject(fb.BufferContext bc, int offset) => 
    AddressBalance._(bc, offset);
}

class AddressBalanceBuilder {
  AddressBalanceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addIndex(int? index) {
    fbBuilder.addUint32(0, index);
    return fbBuilder.offset;
  }
  int addAddressOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addBalance(int? balance) {
    fbBuilder.addUint64(2, balance);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AddressBalanceObjectBuilder extends fb.ObjectBuilder {
  final int? _index;
  final String? _address;
  final int? _balance;

  AddressBalanceObjectBuilder({
    int? index,
    String? address,
    int? balance,
  })
      : _index = index,
        _address = address,
        _balance = balance;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? addressOffset = _address == null ? null
        : fbBuilder.writeString(_address!);
    fbBuilder.startTable(3);
    fbBuilder.addUint32(0, _index);
    fbBuilder.addOffset(1, addressOffset);
    fbBuilder.addUint64(2, _balance);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class AddressBalanceVec {
  AddressBalanceVec._(this._bc, this._bcOffset);
  factory AddressBalanceVec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AddressBalanceVec> reader = _AddressBalanceVecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<AddressBalance>? get values => const fb.ListReader<AddressBalance>(AddressBalance.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'AddressBalanceVec{values: ${values}}';
  }

  AddressBalanceVecT unpack() => AddressBalanceVecT(
      values: values?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, AddressBalanceVecT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class AddressBalanceVecT implements fb.Packable {
  List<AddressBalanceT>? values;

  AddressBalanceVecT({
      this.values});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? valuesOffset = values == null ? null
        : fbBuilder.writeList(values!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, valuesOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'AddressBalanceVecT{values: ${values}}';
  }
}

class _AddressBalanceVecReader extends fb.TableReader<AddressBalanceVec> {
  const _AddressBalanceVecReader();

  @override
  AddressBalanceVec createObject(fb.BufferContext bc, int offset) => 
    AddressBalanceVec._(bc, offset);
}

class AddressBalanceVecBuilder {
  AddressBalanceVecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addValuesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AddressBalanceVecObjectBuilder extends fb.ObjectBuilder {
  final List<AddressBalanceObjectBuilder>? _values;

  AddressBalanceVecObjectBuilder({
    List<AddressBalanceObjectBuilder>? values,
  })
      : _values = values;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? valuesOffset = _values == null ? null
        : fbBuilder.writeList(_values!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, valuesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Checkpoint {
  Checkpoint._(this._bc, this._bcOffset);
  factory Checkpoint(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Checkpoint> reader = _CheckpointReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get height => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get timestamp => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'Checkpoint{height: ${height}, timestamp: ${timestamp}}';
  }

  CheckpointT unpack() => CheckpointT(
      height: height,
      timestamp: timestamp);

  static int pack(fb.Builder fbBuilder, CheckpointT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class CheckpointT implements fb.Packable {
  int height;
  int timestamp;

  CheckpointT({
      this.height = 0,
      this.timestamp = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, height);
    fbBuilder.addUint32(1, timestamp);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'CheckpointT{height: ${height}, timestamp: ${timestamp}}';
  }
}

class _CheckpointReader extends fb.TableReader<Checkpoint> {
  const _CheckpointReader();

  @override
  Checkpoint createObject(fb.BufferContext bc, int offset) => 
    Checkpoint._(bc, offset);
}

class CheckpointBuilder {
  CheckpointBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addHeight(int? height) {
    fbBuilder.addUint32(0, height);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addUint32(1, timestamp);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CheckpointObjectBuilder extends fb.ObjectBuilder {
  final int? _height;
  final int? _timestamp;

  CheckpointObjectBuilder({
    int? height,
    int? timestamp,
  })
      : _height = height,
        _timestamp = timestamp;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addUint32(0, _height);
    fbBuilder.addUint32(1, _timestamp);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CheckpointVec {
  CheckpointVec._(this._bc, this._bcOffset);
  factory CheckpointVec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CheckpointVec> reader = _CheckpointVecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Checkpoint>? get values => const fb.ListReader<Checkpoint>(Checkpoint.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'CheckpointVec{values: ${values}}';
  }

  CheckpointVecT unpack() => CheckpointVecT(
      values: values?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, CheckpointVecT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class CheckpointVecT implements fb.Packable {
  List<CheckpointT>? values;

  CheckpointVecT({
      this.values});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? valuesOffset = values == null ? null
        : fbBuilder.writeList(values!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, valuesOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'CheckpointVecT{values: ${values}}';
  }
}

class _CheckpointVecReader extends fb.TableReader<CheckpointVec> {
  const _CheckpointVecReader();

  @override
  CheckpointVec createObject(fb.BufferContext bc, int offset) => 
    CheckpointVec._(bc, offset);
}

class CheckpointVecBuilder {
  CheckpointVecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addValuesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CheckpointVecObjectBuilder extends fb.ObjectBuilder {
  final List<CheckpointObjectBuilder>? _values;

  CheckpointVecObjectBuilder({
    List<CheckpointObjectBuilder>? values,
  })
      : _values = values;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? valuesOffset = _values == null ? null
        : fbBuilder.writeList(_values!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, valuesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Backup {
  Backup._(this._bc, this._bcOffset);
  factory Backup(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Backup> reader = _BackupReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get seed => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  int get index => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  String? get sk => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get fvk => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get uvk => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  String? get tsk => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  bool get saved => const fb.BoolReader().vTableGet(_bc, _bcOffset, 18, false);

  @override
  String toString() {
    return 'Backup{name: ${name}, seed: ${seed}, index: ${index}, sk: ${sk}, fvk: ${fvk}, uvk: ${uvk}, tsk: ${tsk}, saved: ${saved}}';
  }

  BackupT unpack() => BackupT(
      name: name,
      seed: seed,
      index: index,
      sk: sk,
      fvk: fvk,
      uvk: uvk,
      tsk: tsk,
      saved: saved);

  static int pack(fb.Builder fbBuilder, BackupT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class BackupT implements fb.Packable {
  String? name;
  String? seed;
  int index;
  String? sk;
  String? fvk;
  String? uvk;
  String? tsk;
  bool saved;

  BackupT({
      this.name,
      this.seed,
      this.index = 0,
      this.sk,
      this.fvk,
      this.uvk,
      this.tsk,
      this.saved = false});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? nameOffset = name == null ? null
        : fbBuilder.writeString(name!);
    final int? seedOffset = seed == null ? null
        : fbBuilder.writeString(seed!);
    final int? skOffset = sk == null ? null
        : fbBuilder.writeString(sk!);
    final int? fvkOffset = fvk == null ? null
        : fbBuilder.writeString(fvk!);
    final int? uvkOffset = uvk == null ? null
        : fbBuilder.writeString(uvk!);
    final int? tskOffset = tsk == null ? null
        : fbBuilder.writeString(tsk!);
    fbBuilder.startTable(8);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, seedOffset);
    fbBuilder.addUint32(2, index);
    fbBuilder.addOffset(3, skOffset);
    fbBuilder.addOffset(4, fvkOffset);
    fbBuilder.addOffset(5, uvkOffset);
    fbBuilder.addOffset(6, tskOffset);
    fbBuilder.addBool(7, saved);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'BackupT{name: ${name}, seed: ${seed}, index: ${index}, sk: ${sk}, fvk: ${fvk}, uvk: ${uvk}, tsk: ${tsk}, saved: ${saved}}';
  }
}

class _BackupReader extends fb.TableReader<Backup> {
  const _BackupReader();

  @override
  Backup createObject(fb.BufferContext bc, int offset) => 
    Backup._(bc, offset);
}

class BackupBuilder {
  BackupBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSeedOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIndex(int? index) {
    fbBuilder.addUint32(2, index);
    return fbBuilder.offset;
  }
  int addSkOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addFvkOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addUvkOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addTskOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addSaved(bool? saved) {
    fbBuilder.addBool(7, saved);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class BackupObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final String? _seed;
  final int? _index;
  final String? _sk;
  final String? _fvk;
  final String? _uvk;
  final String? _tsk;
  final bool? _saved;

  BackupObjectBuilder({
    String? name,
    String? seed,
    int? index,
    String? sk,
    String? fvk,
    String? uvk,
    String? tsk,
    bool? saved,
  })
      : _name = name,
        _seed = seed,
        _index = index,
        _sk = sk,
        _fvk = fvk,
        _uvk = uvk,
        _tsk = tsk,
        _saved = saved;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? seedOffset = _seed == null ? null
        : fbBuilder.writeString(_seed!);
    final int? skOffset = _sk == null ? null
        : fbBuilder.writeString(_sk!);
    final int? fvkOffset = _fvk == null ? null
        : fbBuilder.writeString(_fvk!);
    final int? uvkOffset = _uvk == null ? null
        : fbBuilder.writeString(_uvk!);
    final int? tskOffset = _tsk == null ? null
        : fbBuilder.writeString(_tsk!);
    fbBuilder.startTable(8);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, seedOffset);
    fbBuilder.addUint32(2, _index);
    fbBuilder.addOffset(3, skOffset);
    fbBuilder.addOffset(4, fvkOffset);
    fbBuilder.addOffset(5, uvkOffset);
    fbBuilder.addOffset(6, tskOffset);
    fbBuilder.addBool(7, _saved);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class RaptorQdrops {
  RaptorQdrops._(this._bc, this._bcOffset);
  factory RaptorQdrops(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RaptorQdrops> reader = _RaptorQdropsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get drops => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'RaptorQdrops{drops: ${drops}}';
  }

  RaptorQdropsT unpack() => RaptorQdropsT(
      drops: const fb.ListReader<String>(fb.StringReader(), lazy: false).vTableGetNullable(_bc, _bcOffset, 4));

  static int pack(fb.Builder fbBuilder, RaptorQdropsT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class RaptorQdropsT implements fb.Packable {
  List<String>? drops;

  RaptorQdropsT({
      this.drops});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? dropsOffset = drops == null ? null
        : fbBuilder.writeList(drops!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, dropsOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'RaptorQdropsT{drops: ${drops}}';
  }
}

class _RaptorQdropsReader extends fb.TableReader<RaptorQdrops> {
  const _RaptorQdropsReader();

  @override
  RaptorQdrops createObject(fb.BufferContext bc, int offset) => 
    RaptorQdrops._(bc, offset);
}

class RaptorQdropsBuilder {
  RaptorQdropsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addDropsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RaptorQdropsObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _drops;

  RaptorQdropsObjectBuilder({
    List<String>? drops,
  })
      : _drops = drops;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? dropsOffset = _drops == null ? null
        : fbBuilder.writeList(_drops!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, dropsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class RaptorQresult {
  RaptorQresult._(this._bc, this._bcOffset);
  factory RaptorQresult(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RaptorQresult> reader = _RaptorQresultReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get progress => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get total => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 6, 0);
  String? get data => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'RaptorQresult{progress: ${progress}, total: ${total}, data: ${data}}';
  }

  RaptorQresultT unpack() => RaptorQresultT(
      progress: progress,
      total: total,
      data: data);

  static int pack(fb.Builder fbBuilder, RaptorQresultT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class RaptorQresultT implements fb.Packable {
  int progress;
  int total;
  String? data;

  RaptorQresultT({
      this.progress = 0,
      this.total = 0,
      this.data});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? dataOffset = data == null ? null
        : fbBuilder.writeString(data!);
    fbBuilder.startTable(3);
    fbBuilder.addUint8(0, progress);
    fbBuilder.addUint8(1, total);
    fbBuilder.addOffset(2, dataOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'RaptorQresultT{progress: ${progress}, total: ${total}, data: ${data}}';
  }
}

class _RaptorQresultReader extends fb.TableReader<RaptorQresult> {
  const _RaptorQresultReader();

  @override
  RaptorQresult createObject(fb.BufferContext bc, int offset) => 
    RaptorQresult._(bc, offset);
}

class RaptorQresultBuilder {
  RaptorQresultBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addProgress(int? progress) {
    fbBuilder.addUint8(0, progress);
    return fbBuilder.offset;
  }
  int addTotal(int? total) {
    fbBuilder.addUint8(1, total);
    return fbBuilder.offset;
  }
  int addDataOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RaptorQresultObjectBuilder extends fb.ObjectBuilder {
  final int? _progress;
  final int? _total;
  final String? _data;

  RaptorQresultObjectBuilder({
    int? progress,
    int? total,
    String? data,
  })
      : _progress = progress,
        _total = total,
        _data = data;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? dataOffset = _data == null ? null
        : fbBuilder.writeString(_data!);
    fbBuilder.startTable(3);
    fbBuilder.addUint8(0, _progress);
    fbBuilder.addUint8(1, _total);
    fbBuilder.addOffset(2, dataOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Agekeys {
  Agekeys._(this._bc, this._bcOffset);
  factory Agekeys(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Agekeys> reader = _AgekeysReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get sk => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get pk => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Agekeys{sk: ${sk}, pk: ${pk}}';
  }

  AgekeysT unpack() => AgekeysT(
      sk: sk,
      pk: pk);

  static int pack(fb.Builder fbBuilder, AgekeysT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class AgekeysT implements fb.Packable {
  String? sk;
  String? pk;

  AgekeysT({
      this.sk,
      this.pk});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? skOffset = sk == null ? null
        : fbBuilder.writeString(sk!);
    final int? pkOffset = pk == null ? null
        : fbBuilder.writeString(pk!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, skOffset);
    fbBuilder.addOffset(1, pkOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'AgekeysT{sk: ${sk}, pk: ${pk}}';
  }
}

class _AgekeysReader extends fb.TableReader<Agekeys> {
  const _AgekeysReader();

  @override
  Agekeys createObject(fb.BufferContext bc, int offset) => 
    Agekeys._(bc, offset);
}

class AgekeysBuilder {
  AgekeysBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addSkOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPkOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AgekeysObjectBuilder extends fb.ObjectBuilder {
  final String? _sk;
  final String? _pk;

  AgekeysObjectBuilder({
    String? sk,
    String? pk,
  })
      : _sk = sk,
        _pk = pk;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? skOffset = _sk == null ? null
        : fbBuilder.writeString(_sk!);
    final int? pkOffset = _pk == null ? null
        : fbBuilder.writeString(_pk!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, skOffset);
    fbBuilder.addOffset(1, pkOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Servers {
  Servers._(this._bc, this._bcOffset);
  factory Servers(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Servers> reader = _ServersReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get urls => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'Servers{urls: ${urls}}';
  }

  ServersT unpack() => ServersT(
      urls: const fb.ListReader<String>(fb.StringReader(), lazy: false).vTableGetNullable(_bc, _bcOffset, 4));

  static int pack(fb.Builder fbBuilder, ServersT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ServersT implements fb.Packable {
  List<String>? urls;

  ServersT({
      this.urls});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? urlsOffset = urls == null ? null
        : fbBuilder.writeList(urls!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, urlsOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ServersT{urls: ${urls}}';
  }
}

class _ServersReader extends fb.TableReader<Servers> {
  const _ServersReader();

  @override
  Servers createObject(fb.BufferContext bc, int offset) => 
    Servers._(bc, offset);
}

class ServersBuilder {
  ServersBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addUrlsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ServersObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _urls;

  ServersObjectBuilder({
    List<String>? urls,
  })
      : _urls = urls;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? urlsOffset = _urls == null ? null
        : fbBuilder.writeList(_urls!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, urlsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Progress {
  Progress._(this._bc, this._bcOffset);
  factory Progress(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Progress> reader = _ProgressReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get height => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get timestamp => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get trialDecryptions => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get downloaded => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 10, 0);
  PoolBalance? get balances => PoolBalance.reader.vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'Progress{height: ${height}, timestamp: ${timestamp}, trialDecryptions: ${trialDecryptions}, downloaded: ${downloaded}, balances: ${balances}}';
  }

  ProgressT unpack() => ProgressT(
      height: height,
      timestamp: timestamp,
      trialDecryptions: trialDecryptions,
      downloaded: downloaded,
      balances: balances?.unpack());

  static int pack(fb.Builder fbBuilder, ProgressT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class ProgressT implements fb.Packable {
  int height;
  int timestamp;
  int trialDecryptions;
  int downloaded;
  PoolBalanceT? balances;

  ProgressT({
      this.height = 0,
      this.timestamp = 0,
      this.trialDecryptions = 0,
      this.downloaded = 0,
      this.balances});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? balancesOffset = balances?.pack(fbBuilder);
    fbBuilder.startTable(5);
    fbBuilder.addUint32(0, height);
    fbBuilder.addUint32(1, timestamp);
    fbBuilder.addUint64(2, trialDecryptions);
    fbBuilder.addUint64(3, downloaded);
    fbBuilder.addOffset(4, balancesOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'ProgressT{height: ${height}, timestamp: ${timestamp}, trialDecryptions: ${trialDecryptions}, downloaded: ${downloaded}, balances: ${balances}}';
  }
}

class _ProgressReader extends fb.TableReader<Progress> {
  const _ProgressReader();

  @override
  Progress createObject(fb.BufferContext bc, int offset) => 
    Progress._(bc, offset);
}

class ProgressBuilder {
  ProgressBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addHeight(int? height) {
    fbBuilder.addUint32(0, height);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addUint32(1, timestamp);
    return fbBuilder.offset;
  }
  int addTrialDecryptions(int? trialDecryptions) {
    fbBuilder.addUint64(2, trialDecryptions);
    return fbBuilder.offset;
  }
  int addDownloaded(int? downloaded) {
    fbBuilder.addUint64(3, downloaded);
    return fbBuilder.offset;
  }
  int addBalancesOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ProgressObjectBuilder extends fb.ObjectBuilder {
  final int? _height;
  final int? _timestamp;
  final int? _trialDecryptions;
  final int? _downloaded;
  final PoolBalanceObjectBuilder? _balances;

  ProgressObjectBuilder({
    int? height,
    int? timestamp,
    int? trialDecryptions,
    int? downloaded,
    PoolBalanceObjectBuilder? balances,
  })
      : _height = height,
        _timestamp = timestamp,
        _trialDecryptions = trialDecryptions,
        _downloaded = downloaded,
        _balances = balances;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? balancesOffset = _balances?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(5);
    fbBuilder.addUint32(0, _height);
    fbBuilder.addUint32(1, _timestamp);
    fbBuilder.addUint64(2, _trialDecryptions);
    fbBuilder.addUint64(3, _downloaded);
    fbBuilder.addOffset(4, balancesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class KeyPack {
  KeyPack._(this._bc, this._bcOffset);
  factory KeyPack(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<KeyPack> reader = _KeyPackReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get tAddr => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get tKey => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get zAddr => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get zKey => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'KeyPack{tAddr: ${tAddr}, tKey: ${tKey}, zAddr: ${zAddr}, zKey: ${zKey}}';
  }

  KeyPackT unpack() => KeyPackT(
      tAddr: tAddr,
      tKey: tKey,
      zAddr: zAddr,
      zKey: zKey);

  static int pack(fb.Builder fbBuilder, KeyPackT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class KeyPackT implements fb.Packable {
  String? tAddr;
  String? tKey;
  String? zAddr;
  String? zKey;

  KeyPackT({
      this.tAddr,
      this.tKey,
      this.zAddr,
      this.zKey});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? tAddrOffset = tAddr == null ? null
        : fbBuilder.writeString(tAddr!);
    final int? tKeyOffset = tKey == null ? null
        : fbBuilder.writeString(tKey!);
    final int? zAddrOffset = zAddr == null ? null
        : fbBuilder.writeString(zAddr!);
    final int? zKeyOffset = zKey == null ? null
        : fbBuilder.writeString(zKey!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, tAddrOffset);
    fbBuilder.addOffset(1, tKeyOffset);
    fbBuilder.addOffset(2, zAddrOffset);
    fbBuilder.addOffset(3, zKeyOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'KeyPackT{tAddr: ${tAddr}, tKey: ${tKey}, zAddr: ${zAddr}, zKey: ${zKey}}';
  }
}

class _KeyPackReader extends fb.TableReader<KeyPack> {
  const _KeyPackReader();

  @override
  KeyPack createObject(fb.BufferContext bc, int offset) => 
    KeyPack._(bc, offset);
}

class KeyPackBuilder {
  KeyPackBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addTAddrOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTKeyOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addZAddrOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addZKeyOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class KeyPackObjectBuilder extends fb.ObjectBuilder {
  final String? _tAddr;
  final String? _tKey;
  final String? _zAddr;
  final String? _zKey;

  KeyPackObjectBuilder({
    String? tAddr,
    String? tKey,
    String? zAddr,
    String? zKey,
  })
      : _tAddr = tAddr,
        _tKey = tKey,
        _zAddr = zAddr,
        _zKey = zKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? tAddrOffset = _tAddr == null ? null
        : fbBuilder.writeString(_tAddr!);
    final int? tKeyOffset = _tKey == null ? null
        : fbBuilder.writeString(_tKey!);
    final int? zAddrOffset = _zAddr == null ? null
        : fbBuilder.writeString(_zAddr!);
    final int? zKeyOffset = _zKey == null ? null
        : fbBuilder.writeString(_zKey!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, tAddrOffset);
    fbBuilder.addOffset(1, tKeyOffset);
    fbBuilder.addOffset(2, zAddrOffset);
    fbBuilder.addOffset(3, zKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Recipient {
  Recipient._(this._bc, this._bcOffset);
  factory Recipient(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Recipient> reader = _RecipientReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get address => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get pools => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get amount => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 8, 0);
  bool get feeIncluded => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);
  bool get replyTo => const fb.BoolReader().vTableGet(_bc, _bcOffset, 12, false);
  String? get subject => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  String? get memo => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  int get maxAmountPerNote => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 18, 0);

  @override
  String toString() {
    return 'Recipient{address: ${address}, pools: ${pools}, amount: ${amount}, feeIncluded: ${feeIncluded}, replyTo: ${replyTo}, subject: ${subject}, memo: ${memo}, maxAmountPerNote: ${maxAmountPerNote}}';
  }

  RecipientT unpack() => RecipientT(
      address: address,
      pools: pools,
      amount: amount,
      feeIncluded: feeIncluded,
      replyTo: replyTo,
      subject: subject,
      memo: memo,
      maxAmountPerNote: maxAmountPerNote);

  static int pack(fb.Builder fbBuilder, RecipientT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class RecipientT implements fb.Packable {
  String? address;
  int pools;
  int amount;
  bool feeIncluded;
  bool replyTo;
  String? subject;
  String? memo;
  int maxAmountPerNote;

  RecipientT({
      this.address,
      this.pools = 0,
      this.amount = 0,
      this.feeIncluded = false,
      this.replyTo = false,
      this.subject,
      this.memo,
      this.maxAmountPerNote = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? addressOffset = address == null ? null
        : fbBuilder.writeString(address!);
    final int? subjectOffset = subject == null ? null
        : fbBuilder.writeString(subject!);
    final int? memoOffset = memo == null ? null
        : fbBuilder.writeString(memo!);
    fbBuilder.startTable(8);
    fbBuilder.addOffset(0, addressOffset);
    fbBuilder.addUint8(1, pools);
    fbBuilder.addUint64(2, amount);
    fbBuilder.addBool(3, feeIncluded);
    fbBuilder.addBool(4, replyTo);
    fbBuilder.addOffset(5, subjectOffset);
    fbBuilder.addOffset(6, memoOffset);
    fbBuilder.addUint64(7, maxAmountPerNote);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'RecipientT{address: ${address}, pools: ${pools}, amount: ${amount}, feeIncluded: ${feeIncluded}, replyTo: ${replyTo}, subject: ${subject}, memo: ${memo}, maxAmountPerNote: ${maxAmountPerNote}}';
  }
}

class _RecipientReader extends fb.TableReader<Recipient> {
  const _RecipientReader();

  @override
  Recipient createObject(fb.BufferContext bc, int offset) => 
    Recipient._(bc, offset);
}

class RecipientBuilder {
  RecipientBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addAddressOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPools(int? pools) {
    fbBuilder.addUint8(1, pools);
    return fbBuilder.offset;
  }
  int addAmount(int? amount) {
    fbBuilder.addUint64(2, amount);
    return fbBuilder.offset;
  }
  int addFeeIncluded(bool? feeIncluded) {
    fbBuilder.addBool(3, feeIncluded);
    return fbBuilder.offset;
  }
  int addReplyTo(bool? replyTo) {
    fbBuilder.addBool(4, replyTo);
    return fbBuilder.offset;
  }
  int addSubjectOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addMemoOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addMaxAmountPerNote(int? maxAmountPerNote) {
    fbBuilder.addUint64(7, maxAmountPerNote);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RecipientObjectBuilder extends fb.ObjectBuilder {
  final String? _address;
  final int? _pools;
  final int? _amount;
  final bool? _feeIncluded;
  final bool? _replyTo;
  final String? _subject;
  final String? _memo;
  final int? _maxAmountPerNote;

  RecipientObjectBuilder({
    String? address,
    int? pools,
    int? amount,
    bool? feeIncluded,
    bool? replyTo,
    String? subject,
    String? memo,
    int? maxAmountPerNote,
  })
      : _address = address,
        _pools = pools,
        _amount = amount,
        _feeIncluded = feeIncluded,
        _replyTo = replyTo,
        _subject = subject,
        _memo = memo,
        _maxAmountPerNote = maxAmountPerNote;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? addressOffset = _address == null ? null
        : fbBuilder.writeString(_address!);
    final int? subjectOffset = _subject == null ? null
        : fbBuilder.writeString(_subject!);
    final int? memoOffset = _memo == null ? null
        : fbBuilder.writeString(_memo!);
    fbBuilder.startTable(8);
    fbBuilder.addOffset(0, addressOffset);
    fbBuilder.addUint8(1, _pools);
    fbBuilder.addUint64(2, _amount);
    fbBuilder.addBool(3, _feeIncluded);
    fbBuilder.addBool(4, _replyTo);
    fbBuilder.addOffset(5, subjectOffset);
    fbBuilder.addOffset(6, memoOffset);
    fbBuilder.addUint64(7, _maxAmountPerNote);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Recipients {
  Recipients._(this._bc, this._bcOffset);
  factory Recipients(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Recipients> reader = _RecipientsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Recipient>? get values => const fb.ListReader<Recipient>(Recipient.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'Recipients{values: ${values}}';
  }

  RecipientsT unpack() => RecipientsT(
      values: values?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, RecipientsT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class RecipientsT implements fb.Packable {
  List<RecipientT>? values;

  RecipientsT({
      this.values});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? valuesOffset = values == null ? null
        : fbBuilder.writeList(values!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, valuesOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'RecipientsT{values: ${values}}';
  }
}

class _RecipientsReader extends fb.TableReader<Recipients> {
  const _RecipientsReader();

  @override
  Recipients createObject(fb.BufferContext bc, int offset) => 
    Recipients._(bc, offset);
}

class RecipientsBuilder {
  RecipientsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addValuesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RecipientsObjectBuilder extends fb.ObjectBuilder {
  final List<RecipientObjectBuilder>? _values;

  RecipientsObjectBuilder({
    List<RecipientObjectBuilder>? values,
  })
      : _values = values;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? valuesOffset = _values == null ? null
        : fbBuilder.writeList(_values!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, valuesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class RecipientSummary {
  RecipientSummary._(this._bc, this._bcOffset);
  factory RecipientSummary(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RecipientSummary> reader = _RecipientSummaryReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get amount => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  String? get address => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'RecipientSummary{amount: ${amount}, address: ${address}}';
  }

  RecipientSummaryT unpack() => RecipientSummaryT(
      amount: amount,
      address: address);

  static int pack(fb.Builder fbBuilder, RecipientSummaryT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class RecipientSummaryT implements fb.Packable {
  int amount;
  String? address;

  RecipientSummaryT({
      this.amount = 0,
      this.address});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? addressOffset = address == null ? null
        : fbBuilder.writeString(address!);
    fbBuilder.startTable(2);
    fbBuilder.addUint64(0, amount);
    fbBuilder.addOffset(1, addressOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'RecipientSummaryT{amount: ${amount}, address: ${address}}';
  }
}

class _RecipientSummaryReader extends fb.TableReader<RecipientSummary> {
  const _RecipientSummaryReader();

  @override
  RecipientSummary createObject(fb.BufferContext bc, int offset) => 
    RecipientSummary._(bc, offset);
}

class RecipientSummaryBuilder {
  RecipientSummaryBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addAmount(int? amount) {
    fbBuilder.addUint64(0, amount);
    return fbBuilder.offset;
  }
  int addAddressOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RecipientSummaryObjectBuilder extends fb.ObjectBuilder {
  final int? _amount;
  final String? _address;

  RecipientSummaryObjectBuilder({
    int? amount,
    String? address,
  })
      : _amount = amount,
        _address = address;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? addressOffset = _address == null ? null
        : fbBuilder.writeString(_address!);
    fbBuilder.startTable(2);
    fbBuilder.addUint64(0, _amount);
    fbBuilder.addOffset(1, addressOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class UnsignedTxSummary {
  UnsignedTxSummary._(this._bc, this._bcOffset);
  factory UnsignedTxSummary(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<UnsignedTxSummary> reader = _UnsignedTxSummaryReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<RecipientSummary>? get recipients => const fb.ListReader<RecipientSummary>(RecipientSummary.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'UnsignedTxSummary{recipients: ${recipients}}';
  }

  UnsignedTxSummaryT unpack() => UnsignedTxSummaryT(
      recipients: recipients?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, UnsignedTxSummaryT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class UnsignedTxSummaryT implements fb.Packable {
  List<RecipientSummaryT>? recipients;

  UnsignedTxSummaryT({
      this.recipients});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? recipientsOffset = recipients == null ? null
        : fbBuilder.writeList(recipients!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, recipientsOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'UnsignedTxSummaryT{recipients: ${recipients}}';
  }
}

class _UnsignedTxSummaryReader extends fb.TableReader<UnsignedTxSummary> {
  const _UnsignedTxSummaryReader();

  @override
  UnsignedTxSummary createObject(fb.BufferContext bc, int offset) => 
    UnsignedTxSummary._(bc, offset);
}

class UnsignedTxSummaryBuilder {
  UnsignedTxSummaryBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRecipientsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class UnsignedTxSummaryObjectBuilder extends fb.ObjectBuilder {
  final List<RecipientSummaryObjectBuilder>? _recipients;

  UnsignedTxSummaryObjectBuilder({
    List<RecipientSummaryObjectBuilder>? recipients,
  })
      : _recipients = recipients;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? recipientsOffset = _recipients == null ? null
        : fbBuilder.writeList(_recipients!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, recipientsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class TxOutput {
  TxOutput._(this._bc, this._bcOffset);
  factory TxOutput(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TxOutput> reader = _TxOutputReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get id => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  String? get address => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  int get amount => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get pool => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 10, 0);

  @override
  String toString() {
    return 'TxOutput{id: ${id}, address: ${address}, amount: ${amount}, pool: ${pool}}';
  }

  TxOutputT unpack() => TxOutputT(
      id: id,
      address: address,
      amount: amount,
      pool: pool);

  static int pack(fb.Builder fbBuilder, TxOutputT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class TxOutputT implements fb.Packable {
  int id;
  String? address;
  int amount;
  int pool;

  TxOutputT({
      this.id = 0,
      this.address,
      this.amount = 0,
      this.pool = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? addressOffset = address == null ? null
        : fbBuilder.writeString(address!);
    fbBuilder.startTable(4);
    fbBuilder.addUint32(0, id);
    fbBuilder.addOffset(1, addressOffset);
    fbBuilder.addUint64(2, amount);
    fbBuilder.addUint8(3, pool);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'TxOutputT{id: ${id}, address: ${address}, amount: ${amount}, pool: ${pool}}';
  }
}

class _TxOutputReader extends fb.TableReader<TxOutput> {
  const _TxOutputReader();

  @override
  TxOutput createObject(fb.BufferContext bc, int offset) => 
    TxOutput._(bc, offset);
}

class TxOutputBuilder {
  TxOutputBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addId(int? id) {
    fbBuilder.addUint32(0, id);
    return fbBuilder.offset;
  }
  int addAddressOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addAmount(int? amount) {
    fbBuilder.addUint64(2, amount);
    return fbBuilder.offset;
  }
  int addPool(int? pool) {
    fbBuilder.addUint8(3, pool);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TxOutputObjectBuilder extends fb.ObjectBuilder {
  final int? _id;
  final String? _address;
  final int? _amount;
  final int? _pool;

  TxOutputObjectBuilder({
    int? id,
    String? address,
    int? amount,
    int? pool,
  })
      : _id = id,
        _address = address,
        _amount = amount,
        _pool = pool;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? addressOffset = _address == null ? null
        : fbBuilder.writeString(_address!);
    fbBuilder.startTable(4);
    fbBuilder.addUint32(0, _id);
    fbBuilder.addOffset(1, addressOffset);
    fbBuilder.addUint64(2, _amount);
    fbBuilder.addUint8(3, _pool);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class TxReport {
  TxReport._(this._bc, this._bcOffset);
  factory TxReport(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TxReport> reader = _TxReportReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<TxOutput>? get outputs => const fb.ListReader<TxOutput>(TxOutput.reader).vTableGetNullable(_bc, _bcOffset, 4);
  int get transparent => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get sapling => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get orchard => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get netSapling => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 12, 0);
  int get netOrchard => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 14, 0);
  int get fee => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 16, 0);
  int get privacyLevel => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 18, 0);

  @override
  String toString() {
    return 'TxReport{outputs: ${outputs}, transparent: ${transparent}, sapling: ${sapling}, orchard: ${orchard}, netSapling: ${netSapling}, netOrchard: ${netOrchard}, fee: ${fee}, privacyLevel: ${privacyLevel}}';
  }

  TxReportT unpack() => TxReportT(
      outputs: outputs?.map((e) => e.unpack()).toList(),
      transparent: transparent,
      sapling: sapling,
      orchard: orchard,
      netSapling: netSapling,
      netOrchard: netOrchard,
      fee: fee,
      privacyLevel: privacyLevel);

  static int pack(fb.Builder fbBuilder, TxReportT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class TxReportT implements fb.Packable {
  List<TxOutputT>? outputs;
  int transparent;
  int sapling;
  int orchard;
  int netSapling;
  int netOrchard;
  int fee;
  int privacyLevel;

  TxReportT({
      this.outputs,
      this.transparent = 0,
      this.sapling = 0,
      this.orchard = 0,
      this.netSapling = 0,
      this.netOrchard = 0,
      this.fee = 0,
      this.privacyLevel = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? outputsOffset = outputs == null ? null
        : fbBuilder.writeList(outputs!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(8);
    fbBuilder.addOffset(0, outputsOffset);
    fbBuilder.addUint64(1, transparent);
    fbBuilder.addUint64(2, sapling);
    fbBuilder.addUint64(3, orchard);
    fbBuilder.addInt64(4, netSapling);
    fbBuilder.addInt64(5, netOrchard);
    fbBuilder.addUint64(6, fee);
    fbBuilder.addUint8(7, privacyLevel);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'TxReportT{outputs: ${outputs}, transparent: ${transparent}, sapling: ${sapling}, orchard: ${orchard}, netSapling: ${netSapling}, netOrchard: ${netOrchard}, fee: ${fee}, privacyLevel: ${privacyLevel}}';
  }
}

class _TxReportReader extends fb.TableReader<TxReport> {
  const _TxReportReader();

  @override
  TxReport createObject(fb.BufferContext bc, int offset) => 
    TxReport._(bc, offset);
}

class TxReportBuilder {
  TxReportBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addOutputsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTransparent(int? transparent) {
    fbBuilder.addUint64(1, transparent);
    return fbBuilder.offset;
  }
  int addSapling(int? sapling) {
    fbBuilder.addUint64(2, sapling);
    return fbBuilder.offset;
  }
  int addOrchard(int? orchard) {
    fbBuilder.addUint64(3, orchard);
    return fbBuilder.offset;
  }
  int addNetSapling(int? netSapling) {
    fbBuilder.addInt64(4, netSapling);
    return fbBuilder.offset;
  }
  int addNetOrchard(int? netOrchard) {
    fbBuilder.addInt64(5, netOrchard);
    return fbBuilder.offset;
  }
  int addFee(int? fee) {
    fbBuilder.addUint64(6, fee);
    return fbBuilder.offset;
  }
  int addPrivacyLevel(int? privacyLevel) {
    fbBuilder.addUint8(7, privacyLevel);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TxReportObjectBuilder extends fb.ObjectBuilder {
  final List<TxOutputObjectBuilder>? _outputs;
  final int? _transparent;
  final int? _sapling;
  final int? _orchard;
  final int? _netSapling;
  final int? _netOrchard;
  final int? _fee;
  final int? _privacyLevel;

  TxReportObjectBuilder({
    List<TxOutputObjectBuilder>? outputs,
    int? transparent,
    int? sapling,
    int? orchard,
    int? netSapling,
    int? netOrchard,
    int? fee,
    int? privacyLevel,
  })
      : _outputs = outputs,
        _transparent = transparent,
        _sapling = sapling,
        _orchard = orchard,
        _netSapling = netSapling,
        _netOrchard = netOrchard,
        _fee = fee,
        _privacyLevel = privacyLevel;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? outputsOffset = _outputs == null ? null
        : fbBuilder.writeList(_outputs!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(8);
    fbBuilder.addOffset(0, outputsOffset);
    fbBuilder.addUint64(1, _transparent);
    fbBuilder.addUint64(2, _sapling);
    fbBuilder.addUint64(3, _orchard);
    fbBuilder.addInt64(4, _netSapling);
    fbBuilder.addInt64(5, _netOrchard);
    fbBuilder.addUint64(6, _fee);
    fbBuilder.addUint8(7, _privacyLevel);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Fee {
  Fee._(this._bc, this._bcOffset);
  factory Fee(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Fee> reader = _FeeReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get fee => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get minFee => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get maxFee => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get scheme => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 10, 0);

  @override
  String toString() {
    return 'Fee{fee: ${fee}, minFee: ${minFee}, maxFee: ${maxFee}, scheme: ${scheme}}';
  }

  FeeT unpack() => FeeT(
      fee: fee,
      minFee: minFee,
      maxFee: maxFee,
      scheme: scheme);

  static int pack(fb.Builder fbBuilder, FeeT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class FeeT implements fb.Packable {
  int fee;
  int minFee;
  int maxFee;
  int scheme;

  FeeT({
      this.fee = 0,
      this.minFee = 0,
      this.maxFee = 0,
      this.scheme = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(4);
    fbBuilder.addUint64(0, fee);
    fbBuilder.addUint64(1, minFee);
    fbBuilder.addUint64(2, maxFee);
    fbBuilder.addUint8(3, scheme);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'FeeT{fee: ${fee}, minFee: ${minFee}, maxFee: ${maxFee}, scheme: ${scheme}}';
  }
}

class _FeeReader extends fb.TableReader<Fee> {
  const _FeeReader();

  @override
  Fee createObject(fb.BufferContext bc, int offset) => 
    Fee._(bc, offset);
}

class FeeBuilder {
  FeeBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addFee(int? fee) {
    fbBuilder.addUint64(0, fee);
    return fbBuilder.offset;
  }
  int addMinFee(int? minFee) {
    fbBuilder.addUint64(1, minFee);
    return fbBuilder.offset;
  }
  int addMaxFee(int? maxFee) {
    fbBuilder.addUint64(2, maxFee);
    return fbBuilder.offset;
  }
  int addScheme(int? scheme) {
    fbBuilder.addUint8(3, scheme);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FeeObjectBuilder extends fb.ObjectBuilder {
  final int? _fee;
  final int? _minFee;
  final int? _maxFee;
  final int? _scheme;

  FeeObjectBuilder({
    int? fee,
    int? minFee,
    int? maxFee,
    int? scheme,
  })
      : _fee = fee,
        _minFee = minFee,
        _maxFee = maxFee,
        _scheme = scheme;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(4);
    fbBuilder.addUint64(0, _fee);
    fbBuilder.addUint64(1, _minFee);
    fbBuilder.addUint64(2, _maxFee);
    fbBuilder.addUint8(3, _scheme);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PaymentUri {
  PaymentUri._(this._bc, this._bcOffset);
  factory PaymentUri(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PaymentUri> reader = _PaymentUriReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get address => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get amount => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 6, 0);
  String? get memo => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'PaymentUri{address: ${address}, amount: ${amount}, memo: ${memo}}';
  }

  PaymentUriT unpack() => PaymentUriT(
      address: address,
      amount: amount,
      memo: memo);

  static int pack(fb.Builder fbBuilder, PaymentUriT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class PaymentUriT implements fb.Packable {
  String? address;
  int amount;
  String? memo;

  PaymentUriT({
      this.address,
      this.amount = 0,
      this.memo});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? addressOffset = address == null ? null
        : fbBuilder.writeString(address!);
    final int? memoOffset = memo == null ? null
        : fbBuilder.writeString(memo!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, addressOffset);
    fbBuilder.addUint64(1, amount);
    fbBuilder.addOffset(2, memoOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'PaymentUriT{address: ${address}, amount: ${amount}, memo: ${memo}}';
  }
}

class _PaymentUriReader extends fb.TableReader<PaymentUri> {
  const _PaymentUriReader();

  @override
  PaymentUri createObject(fb.BufferContext bc, int offset) => 
    PaymentUri._(bc, offset);
}

class PaymentUriBuilder {
  PaymentUriBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addAddressOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addAmount(int? amount) {
    fbBuilder.addUint64(1, amount);
    return fbBuilder.offset;
  }
  int addMemoOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PaymentUriObjectBuilder extends fb.ObjectBuilder {
  final String? _address;
  final int? _amount;
  final String? _memo;

  PaymentUriObjectBuilder({
    String? address,
    int? amount,
    String? memo,
  })
      : _address = address,
        _amount = amount,
        _memo = memo;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? addressOffset = _address == null ? null
        : fbBuilder.writeString(_address!);
    final int? memoOffset = _memo == null ? null
        : fbBuilder.writeString(_memo!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, addressOffset);
    fbBuilder.addUint64(1, _amount);
    fbBuilder.addOffset(2, memoOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class AccountAddress {
  AccountAddress._(this._bc, this._bcOffset);
  factory AccountAddress(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AccountAddress> reader = _AccountAddressReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get id => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get transparent => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get sapling => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get orchard => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get address => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'AccountAddress{id: ${id}, name: ${name}, transparent: ${transparent}, sapling: ${sapling}, orchard: ${orchard}, address: ${address}}';
  }

  AccountAddressT unpack() => AccountAddressT(
      id: id,
      name: name,
      transparent: transparent,
      sapling: sapling,
      orchard: orchard,
      address: address);

  static int pack(fb.Builder fbBuilder, AccountAddressT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class AccountAddressT implements fb.Packable {
  int id;
  String? name;
  String? transparent;
  String? sapling;
  String? orchard;
  String? address;

  AccountAddressT({
      this.id = 0,
      this.name,
      this.transparent,
      this.sapling,
      this.orchard,
      this.address});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? nameOffset = name == null ? null
        : fbBuilder.writeString(name!);
    final int? transparentOffset = transparent == null ? null
        : fbBuilder.writeString(transparent!);
    final int? saplingOffset = sapling == null ? null
        : fbBuilder.writeString(sapling!);
    final int? orchardOffset = orchard == null ? null
        : fbBuilder.writeString(orchard!);
    final int? addressOffset = address == null ? null
        : fbBuilder.writeString(address!);
    fbBuilder.startTable(6);
    fbBuilder.addUint32(0, id);
    fbBuilder.addOffset(1, nameOffset);
    fbBuilder.addOffset(2, transparentOffset);
    fbBuilder.addOffset(3, saplingOffset);
    fbBuilder.addOffset(4, orchardOffset);
    fbBuilder.addOffset(5, addressOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'AccountAddressT{id: ${id}, name: ${name}, transparent: ${transparent}, sapling: ${sapling}, orchard: ${orchard}, address: ${address}}';
  }
}

class _AccountAddressReader extends fb.TableReader<AccountAddress> {
  const _AccountAddressReader();

  @override
  AccountAddress createObject(fb.BufferContext bc, int offset) => 
    AccountAddress._(bc, offset);
}

class AccountAddressBuilder {
  AccountAddressBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addId(int? id) {
    fbBuilder.addUint32(0, id);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTransparentOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSaplingOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addOrchardOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addAddressOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AccountAddressObjectBuilder extends fb.ObjectBuilder {
  final int? _id;
  final String? _name;
  final String? _transparent;
  final String? _sapling;
  final String? _orchard;
  final String? _address;

  AccountAddressObjectBuilder({
    int? id,
    String? name,
    String? transparent,
    String? sapling,
    String? orchard,
    String? address,
  })
      : _id = id,
        _name = name,
        _transparent = transparent,
        _sapling = sapling,
        _orchard = orchard,
        _address = address;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? transparentOffset = _transparent == null ? null
        : fbBuilder.writeString(_transparent!);
    final int? saplingOffset = _sapling == null ? null
        : fbBuilder.writeString(_sapling!);
    final int? orchardOffset = _orchard == null ? null
        : fbBuilder.writeString(_orchard!);
    final int? addressOffset = _address == null ? null
        : fbBuilder.writeString(_address!);
    fbBuilder.startTable(6);
    fbBuilder.addUint32(0, _id);
    fbBuilder.addOffset(1, nameOffset);
    fbBuilder.addOffset(2, transparentOffset);
    fbBuilder.addOffset(3, saplingOffset);
    fbBuilder.addOffset(4, orchardOffset);
    fbBuilder.addOffset(5, addressOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Swap {
  Swap._(this._bc, this._bcOffset);
  factory Swap(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Swap> reader = _SwapReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get provider => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get providerId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  int get timestamp => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  String? get fromCurrency => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get fromAmount => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get fromAddress => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  String? get toCurrency => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  String? get toAmount => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  String? get toAddress => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);

  @override
  String toString() {
    return 'Swap{provider: ${provider}, providerId: ${providerId}, timestamp: ${timestamp}, fromCurrency: ${fromCurrency}, fromAmount: ${fromAmount}, fromAddress: ${fromAddress}, toCurrency: ${toCurrency}, toAmount: ${toAmount}, toAddress: ${toAddress}}';
  }

  SwapT unpack() => SwapT(
      provider: provider,
      providerId: providerId,
      timestamp: timestamp,
      fromCurrency: fromCurrency,
      fromAmount: fromAmount,
      fromAddress: fromAddress,
      toCurrency: toCurrency,
      toAmount: toAmount,
      toAddress: toAddress);

  static int pack(fb.Builder fbBuilder, SwapT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class SwapT implements fb.Packable {
  String? provider;
  String? providerId;
  int timestamp;
  String? fromCurrency;
  String? fromAmount;
  String? fromAddress;
  String? toCurrency;
  String? toAmount;
  String? toAddress;

  SwapT({
      this.provider,
      this.providerId,
      this.timestamp = 0,
      this.fromCurrency,
      this.fromAmount,
      this.fromAddress,
      this.toCurrency,
      this.toAmount,
      this.toAddress});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? providerOffset = provider == null ? null
        : fbBuilder.writeString(provider!);
    final int? providerIdOffset = providerId == null ? null
        : fbBuilder.writeString(providerId!);
    final int? fromCurrencyOffset = fromCurrency == null ? null
        : fbBuilder.writeString(fromCurrency!);
    final int? fromAmountOffset = fromAmount == null ? null
        : fbBuilder.writeString(fromAmount!);
    final int? fromAddressOffset = fromAddress == null ? null
        : fbBuilder.writeString(fromAddress!);
    final int? toCurrencyOffset = toCurrency == null ? null
        : fbBuilder.writeString(toCurrency!);
    final int? toAmountOffset = toAmount == null ? null
        : fbBuilder.writeString(toAmount!);
    final int? toAddressOffset = toAddress == null ? null
        : fbBuilder.writeString(toAddress!);
    fbBuilder.startTable(9);
    fbBuilder.addOffset(0, providerOffset);
    fbBuilder.addOffset(1, providerIdOffset);
    fbBuilder.addUint32(2, timestamp);
    fbBuilder.addOffset(3, fromCurrencyOffset);
    fbBuilder.addOffset(4, fromAmountOffset);
    fbBuilder.addOffset(5, fromAddressOffset);
    fbBuilder.addOffset(6, toCurrencyOffset);
    fbBuilder.addOffset(7, toAmountOffset);
    fbBuilder.addOffset(8, toAddressOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'SwapT{provider: ${provider}, providerId: ${providerId}, timestamp: ${timestamp}, fromCurrency: ${fromCurrency}, fromAmount: ${fromAmount}, fromAddress: ${fromAddress}, toCurrency: ${toCurrency}, toAmount: ${toAmount}, toAddress: ${toAddress}}';
  }
}

class _SwapReader extends fb.TableReader<Swap> {
  const _SwapReader();

  @override
  Swap createObject(fb.BufferContext bc, int offset) => 
    Swap._(bc, offset);
}

class SwapBuilder {
  SwapBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(9);
  }

  int addProviderOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addProviderIdOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addUint32(2, timestamp);
    return fbBuilder.offset;
  }
  int addFromCurrencyOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addFromAmountOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addFromAddressOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addToCurrencyOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addToAmountOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addToAddressOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SwapObjectBuilder extends fb.ObjectBuilder {
  final String? _provider;
  final String? _providerId;
  final int? _timestamp;
  final String? _fromCurrency;
  final String? _fromAmount;
  final String? _fromAddress;
  final String? _toCurrency;
  final String? _toAmount;
  final String? _toAddress;

  SwapObjectBuilder({
    String? provider,
    String? providerId,
    int? timestamp,
    String? fromCurrency,
    String? fromAmount,
    String? fromAddress,
    String? toCurrency,
    String? toAmount,
    String? toAddress,
  })
      : _provider = provider,
        _providerId = providerId,
        _timestamp = timestamp,
        _fromCurrency = fromCurrency,
        _fromAmount = fromAmount,
        _fromAddress = fromAddress,
        _toCurrency = toCurrency,
        _toAmount = toAmount,
        _toAddress = toAddress;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? providerOffset = _provider == null ? null
        : fbBuilder.writeString(_provider!);
    final int? providerIdOffset = _providerId == null ? null
        : fbBuilder.writeString(_providerId!);
    final int? fromCurrencyOffset = _fromCurrency == null ? null
        : fbBuilder.writeString(_fromCurrency!);
    final int? fromAmountOffset = _fromAmount == null ? null
        : fbBuilder.writeString(_fromAmount!);
    final int? fromAddressOffset = _fromAddress == null ? null
        : fbBuilder.writeString(_fromAddress!);
    final int? toCurrencyOffset = _toCurrency == null ? null
        : fbBuilder.writeString(_toCurrency!);
    final int? toAmountOffset = _toAmount == null ? null
        : fbBuilder.writeString(_toAmount!);
    final int? toAddressOffset = _toAddress == null ? null
        : fbBuilder.writeString(_toAddress!);
    fbBuilder.startTable(9);
    fbBuilder.addOffset(0, providerOffset);
    fbBuilder.addOffset(1, providerIdOffset);
    fbBuilder.addUint32(2, _timestamp);
    fbBuilder.addOffset(3, fromCurrencyOffset);
    fbBuilder.addOffset(4, fromAmountOffset);
    fbBuilder.addOffset(5, fromAddressOffset);
    fbBuilder.addOffset(6, toCurrencyOffset);
    fbBuilder.addOffset(7, toAmountOffset);
    fbBuilder.addOffset(8, toAddressOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SwapVec {
  SwapVec._(this._bc, this._bcOffset);
  factory SwapVec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SwapVec> reader = _SwapVecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Swap>? get values => const fb.ListReader<Swap>(Swap.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'SwapVec{values: ${values}}';
  }

  SwapVecT unpack() => SwapVecT(
      values: values?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, SwapVecT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class SwapVecT implements fb.Packable {
  List<SwapT>? values;

  SwapVecT({
      this.values});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? valuesOffset = values == null ? null
        : fbBuilder.writeList(values!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, valuesOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'SwapVecT{values: ${values}}';
  }
}

class _SwapVecReader extends fb.TableReader<SwapVec> {
  const _SwapVecReader();

  @override
  SwapVec createObject(fb.BufferContext bc, int offset) => 
    SwapVec._(bc, offset);
}

class SwapVecBuilder {
  SwapVecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addValuesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SwapVecObjectBuilder extends fb.ObjectBuilder {
  final List<SwapObjectBuilder>? _values;

  SwapVecObjectBuilder({
    List<SwapObjectBuilder>? values,
  })
      : _values = values;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? valuesOffset = _values == null ? null
        : fbBuilder.writeList(_values!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, valuesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
